{"version":3,"file":"types.js","sourceRoot":"","sources":["../lib/types.ts"],"names":[],"mappings":";;;AA6BA;;GAEG;AACH,IAAY,QAuBX;AAvBD,WAAY,QAAQ;IAClB;;;;OAIG;IACH,+BAAmB,CAAA;IAEnB;;;OAGG;IACH,2BAAe,CAAA;IAEf;;OAEG;IACH,yBAAa,CAAA;IAEb;;OAEG;IACH,yBAAa,CAAA;AACf,CAAC,EAvBW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAuBnB","sourcesContent":["/**\n * @private\n */\n declare global {\n  interface Window {\n    chrome: any;\n    createTwilioTFLiteModule: () => Promise<any>;\n    createTwilioTFLiteSIMDModule: () => Promise<any>;\n    Twilio: Object & { VideoProcessors?: any };\n  }\n}\n\n/**\n * @private\n */\nexport interface Timing {\n  delay?: number;\n  end?: number;\n  start?: number;\n}\n\n/**\n * @private\n */\nexport interface Dimensions {\n  height: number;\n  width: number;\n}\n\n/**\n * ImageFit specifies the positioning of an image inside a viewport.\n */\nexport enum ImageFit {\n  /**\n   * Scale the image up or down to fill the viewport while preserving the aspect ratio.\n   * The image will be fully visible but will add empty space in the viewport if\n   * aspect ratios do not match.\n   */\n  Contain = 'Contain',\n\n  /**\n   * Scale the image to fill both height and width of the viewport while preserving\n   * the aspect ratio, but will crop the image if aspect ratios do not match.\n   */\n  Cover = 'Cover',\n\n  /**\n   * Stretches the image to fill the viewport regardless of aspect ratio.\n   */\n  Fill = 'Fill',\n\n  /**\n   * Ignore height and width and use the original size.\n   */\n  None = 'None'\n}\n"]}