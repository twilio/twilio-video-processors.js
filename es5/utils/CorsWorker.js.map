{"version":3,"file":"CorsWorker.js","sourceRoot":"","sources":["../../lib/utils/CorsWorker.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAM,yBAAyB,GAAG,UAAC,QAAgB;IACjD,IAAM,SAAS,GAAG,KAAK,CAAC;IACxB,aAAa;IACb,KAAK,GAAG,UAAC,GAAW,EAAE,IAAkB;QACtC,OAAA,SAAS,CAAC,UAAG,QAAQ,SAAG,GAAG,CAAE,EAAE,IAAI,CAAC;IAApC,CAAoC,CAAC;AACzC,CAAC,CAAC;AAEF,IAAM,iCAAiC,GAAG,UAAC,QAAgB;IACzD,IAAM,iBAAiB,GAAG,aAAa,CAAC;IACxC,aAAa;IACb,aAAa,GAAG,UAAC,GAAW;QAC1B,OAAA,iBAAiB,CAAC,UAAG,QAAQ,SAAG,GAAG,CAAE,CAAC;IAAtC,CAAsC,CAAC;AAC3C,CAAC,CAAC;AAEF;IAGE,oBAAY,GAAW;QACrB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC,WAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YAC5E,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;SAChD;aAAM;YACL,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;SACjD;IACH,CAAC;IAEa,qCAAgB,GAA9B,UAA+B,GAAW;;;;;4BACvB,qBAAM,KAAK,CAAC,GAAG,CAAC,EAAA;;wBAA3B,QAAQ,GAAG,SAAgB;wBACpB,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;;wBAA5B,IAAI,GAAG,SAAqB;wBAC5B,IAAI,GAAG,wBAAwB,CAAC;wBAChC,QAAQ,GAAG,UAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAG,CAAC;wBACvD,OAAO,GAAG;4BACd,eAAQ,IAAI,MAAG;4BACf,kBAAkB,CAAC,WAAI,yBAAyB,iBAAM,QAAQ,SAAK,CAAC;4BACpE,kBAAkB,CAAC,WAAI,iCAAiC,iBAAM,QAAQ,SAAK,CAAC;4BAC5E,kBAAkB,CAAC,IAAI,CAAC;yBACzB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;wBACL,QAAQ,GAAG,IAAI,IAAI,CAAC,CAAC,0BAAkB,OAAO,QAAI,CAAC,EAAE,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;wBAC/D,SAAS,GAAG,GAAG,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;wBAChD,sBAAO,IAAI,MAAM,CAAC,SAAS,CAAC,EAAC;;;;KAC9B;IAEa,oCAAe,GAA7B,UAA8B,GAAW;;;gBACvC,sBAAO,IAAI,MAAM,CAAC,GAAG,CAAC,EAAC;;;KACxB;IACH,iBAAC;AAAD,CAAC,AA9BD,IA8BC;AA9BY,gCAAU","sourcesContent":["declare function importScripts(path: string): any;\n\nconst fixWorkerBasePathForFetch = (basePath: string) => {\n  const fetchOrig = fetch;\n  // @ts-ignore\n  fetch = (url: string, init?: RequestInit) => // eslint-disable-line no-global-assign\n    fetchOrig(`${basePath}${url}`, init);\n};\n\nconst fixWorkerBasePathForImportScripts = (basePath: string) => {\n  const importScriptsOrig = importScripts;\n  // @ts-ignore\n  importScripts = (url: string) =>\n    importScriptsOrig(`${basePath}${url}`);\n};\n\nexport class CorsWorker {\n  readonly workerPromise: Promise<Worker>;\n\n  constructor(url: string) {\n    if (!/:\\/\\//.test(url) || new RegExp(`^${window.location.origin}`).test(url)) {\n      this.workerPromise = this._loadSameOrigin(url);\n    } else {\n      this.workerPromise = this._loadCrossOrigin(url);\n    }\n  }\n\n  private async _loadCrossOrigin(url: string): Promise<Worker> {\n    const response = await fetch(url);\n    const code = await response.text();\n    const type = 'application/javascript';\n    const basePath = `${url.split('/').slice(0, -1).join('/')}/`;\n    const dataUrl = [\n      `data:${type},`,\n      encodeURIComponent(`(${fixWorkerBasePathForFetch})(\"${basePath}\");`),\n      encodeURIComponent(`(${fixWorkerBasePathForImportScripts})(\"${basePath}\");`),\n      encodeURIComponent(code),\n    ].join('');\n    const dataBlob = new Blob([`importScripts(\"${dataUrl}\")`], { type });\n    const workerUrl = URL.createObjectURL(dataBlob);\n    return new Worker(workerUrl);\n  }\n\n  private async _loadSameOrigin(url: string): Promise<Worker> {\n    return new Worker(url);\n  }\n}\n"]}