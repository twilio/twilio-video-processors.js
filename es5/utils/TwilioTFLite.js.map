{"version":3,"file":"TwilioTFLite.js","sourceRoot":"","sources":["../../lib/utils/TwilioTFLite.ts"],"names":[],"mappings":"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","sourcesContent":["declare const WorkerGlobalScope: any;\ndeclare function createTwilioTFLiteModule(): Promise<any>;\ndeclare function createTwilioTFLiteSIMDModule(): Promise<any>;\ndeclare function importScripts(path: string): any;\n\nconst isWebWorker = typeof WorkerGlobalScope !== 'undefined'\n  && self instanceof WorkerGlobalScope;\n\nconst loadedScripts = new Set<string>();\nlet model: ArrayBuffer;\n\n/**\n * @private\n */\nexport class TwilioTFLite {\n  private _inputBuffer: Uint8ClampedArray | null = null;\n  private _isSimdEnabled: boolean | null = null;\n  private _tflite: any = null;\n\n  get isSimdEnabled(): boolean | null {\n    return this._isSimdEnabled;\n  }\n\n  async initialize(\n    assetsPath: string,\n    modelName: string,\n    moduleLoaderName: string,\n    moduleSimdLoaderName: string,\n  ): Promise<void> {\n    if (this._tflite) {\n      return;\n    }\n    if (isWebWorker) {\n      // NOTE(mmalavalli): In a web worker, paths to other dependencies\n      // are determined relative to the assets path, so no need to append\n      // it to the file names of the dependencies.\n      assetsPath = '';\n    }\n    const [, modelResponse]: [void, Response] = await Promise.all([\n      this._loadWasmModule(\n        assetsPath,\n        moduleLoaderName,\n        moduleSimdLoaderName,\n      ),\n      fetch(`${assetsPath}${modelName}`),\n    ]);\n    model = model || await modelResponse.arrayBuffer();\n    const { _tflite: tflite } = this;\n    const modelBufferOffset = tflite._getModelBufferMemoryOffset();\n    tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n    tflite._loadModel(model.byteLength);\n  }\n\n  loadInputBuffer(inputBuffer: Uint8ClampedArray): void {\n    const { _tflite: tflite } = this;\n    const height = tflite._getInputHeight();\n    const width = tflite._getInputWidth();\n    const pixels = width * height;\n    const tfliteInputMemoryOffset = tflite._getInputMemoryOffset() / 4;\n\n    for (let i = 0; i < pixels; i++) {\n      const curTFLiteOffset = tfliteInputMemoryOffset + i * 3;\n      const curImageBufferOffset = i * 4;\n      tflite.HEAPF32[curTFLiteOffset] = inputBuffer[curImageBufferOffset] / 255;\n      tflite.HEAPF32[curTFLiteOffset + 1] = inputBuffer[curImageBufferOffset + 1] / 255;\n      tflite.HEAPF32[curTFLiteOffset + 2] = inputBuffer[curImageBufferOffset + 2] / 255;\n    }\n    this._inputBuffer = inputBuffer;\n  }\n\n  runInference(): Uint8ClampedArray {\n    const { _tflite: tflite } = this;\n    const height = tflite._getInputHeight();\n    const width = tflite._getInputWidth();\n    const pixels = width * height;\n    const tfliteOutputMemoryOffset = tflite._getOutputMemoryOffset() / 4;\n\n    tflite._runInference();\n\n    const inputBuffer = this._inputBuffer || new Uint8ClampedArray(pixels * 4);\n    for (let i = 0; i < pixels; i++) {\n      inputBuffer![i * 4 + 3] = Math.round(tflite.HEAPF32[tfliteOutputMemoryOffset + i] * 255);\n    }\n    return inputBuffer!;\n  }\n\n  private async _loadScript(path: string): Promise<void> {\n    if (loadedScripts.has(path)) {\n      return;\n    }\n    if (isWebWorker) {\n      importScripts(path);\n      loadedScripts.add(path);\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.onload = () => {\n        loadedScripts.add(path);\n        resolve();\n      };\n      script.onerror = () => {\n        reject();\n      };\n      document.head.append(script);\n      script.src = path;\n    });\n  }\n\n  private async _loadWasmModule(\n    assetsPath: string,\n    moduleLoaderName: string,\n    moduleSimdLoaderName: string,\n  ): Promise<void> {\n    try {\n      await this._loadScript(`${assetsPath}${moduleSimdLoaderName}`);\n      this._tflite = await createTwilioTFLiteSIMDModule();\n      this._isSimdEnabled = true;\n    } catch {\n      await this._loadScript(`${assetsPath}${moduleLoaderName}`);\n      this._tflite = await createTwilioTFLiteModule();\n      this._isSimdEnabled = false;\n    }\n  }\n}\n"]}