{"version":3,"file":"WebGL2PipelineInputStage.js","sourceRoot":"","sources":["../../../../lib/processors/pipelines/webgl2pipeline/WebGL2PipelineInputStage.ts"],"names":[],"mappings":";;;AAEA,iEAAwD;AAExD;;GAEG;AACH;IAKE,kCAAY,KAA6B;QAFjC,kBAAa,GAAwB,IAAI,CAAC;QAG1C,IAAA,KAAoB,KAAK,CAAC,MAAM,EAA9B,MAAM,YAAA,EAAE,KAAK,WAAiB,CAAC;QACvC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,kBAAkB,GAAG,IAAA,qCAAa,EACrC,KAAK,EACL,KAAK,CAAC,KAAK,EACX,KAAK,EACL,MAAM,EACN,KAAK,CAAC,OAAO,EACb,KAAK,CAAC,OAAO,CACb,CAAC;IACL,CAAC;IAED,0CAAO,GAAP;QACQ,IAAA,KAIF,IAAI,EAHN,MAAM,YAAA,EACN,kBAAkB,wBAAA,EAClB,aAAa,mBACP,CAAC;QACT,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;QACzC,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;IACtC,CAAC;IAED,yCAAM,GAAN,UACE,UAAuB,EACvB,gBAA4B;QAEtB,IAAA,KAGF,IAAI,EAFN,MAAM,YAAA,EACN,kBAAkB,wBACZ,CAAC;QAEH,IAAA,KAAoB,MAAM,CAAC,MAAM,EAA/B,MAAM,YAAA,EAAE,KAAK,WAAkB,CAAC;QACxC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QACrC,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QAEtC,IAAI,UAAU,EAAE;YACd,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACtC,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,UAAU,EACjB,kBAAkB,CACnB,CAAC;YACF,MAAM,CAAC,aAAa,CAClB,MAAM,CAAC,UAAU,EACjB,CAAC,EACD,CAAC,EACD,CAAC,EACD,KAAK,EACL,MAAM,EACN,MAAM,CAAC,IAAI,EACX,MAAM,CAAC,aAAa,EACpB,UAAU,CACX,CAAC;SACH;QAED,IAAI,CAAC,gBAAgB,EAAE;YACrB,OAAO;SACR;QAEC,IAAA,IAAI,GAGF,gBAAgB,KAHd,EACI,aAAa,GAEnB,gBAAgB,OAFG,EACd,YAAY,GACjB,gBAAgB,MADC,CACA;QAErB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,IAAI,CAAC,aAAa,GAAG,IAAA,qCAAa,EAChC,MAAM,EACN,MAAM,CAAC,KAAK,EACZ,YAAY,EACZ,aAAa,EACb,MAAM,CAAC,OAAO,EACd,MAAM,CAAC,OAAO,CACf,CAAC;SACH;QAED,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;QACnD,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAEtC,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,UAAU,EACjB,IAAI,CAAC,aAAa,CACnB,CAAC;QACF,MAAM,CAAC,aAAa,CAClB,MAAM,CAAC,UAAU,EACjB,CAAC,EACD,CAAC,EACD,CAAC,EACD,YAAY,EACZ,aAAa,EACb,MAAM,CAAC,IAAI,EACX,MAAM,CAAC,aAAa,EACpB,IAAI,CACL,CAAC;IACJ,CAAC;IACH,+BAAC;AAAD,CAAC,AApGD,IAoGC;AApGY,4DAAwB","sourcesContent":["import { InputFrame } from '../../../types';\nimport { Pipeline } from '../Pipeline';\nimport { createTexture } from './webgl2PipelineHelpers';\n\n/**\n * @private\n */\nexport class WebGL2PipelineInputStage implements Pipeline.Stage {\n  private readonly _glOut: WebGL2RenderingContext;\n  private readonly _inputFrameTexture: WebGLTexture;\n  private _inputTexture: WebGLTexture | null = null;\n\n  constructor(glOut: WebGL2RenderingContext) {\n    const { height, width } = glOut.canvas;\n    this._glOut = glOut;\n    this._inputFrameTexture = createTexture(\n      glOut,\n      glOut.RGBA8,\n      width,\n      height,\n      glOut.NEAREST,\n      glOut.NEAREST\n    )!;\n  }\n\n  cleanUp(): void {\n    const {\n      _glOut,\n      _inputFrameTexture,\n      _inputTexture\n    } = this;\n    _glOut.deleteTexture(_inputFrameTexture);\n    _glOut.deleteTexture(_inputTexture);\n  }\n\n  render(\n    inputFrame?: InputFrame,\n    inputTextureData?: ImageData\n  ): void {\n    const {\n      _glOut,\n      _inputFrameTexture\n    } = this;\n\n    const { height, width } = _glOut.canvas;\n    _glOut.viewport(0, 0, width, height);\n    _glOut.clearColor(0, 0, 0, 0);\n    _glOut.clear(_glOut.COLOR_BUFFER_BIT);\n\n    if (inputFrame) {\n      _glOut.activeTexture(_glOut.TEXTURE0);\n      _glOut.bindTexture(\n        _glOut.TEXTURE_2D,\n        _inputFrameTexture\n      );\n      _glOut.texSubImage2D(\n        _glOut.TEXTURE_2D,\n        0,\n        0,\n        0,\n        width,\n        height,\n        _glOut.RGBA,\n        _glOut.UNSIGNED_BYTE,\n        inputFrame\n      );\n    }\n\n    if (!inputTextureData) {\n      return;\n    }\n    const {\n      data,\n      height: textureHeight,\n      width: textureWidth\n    } = inputTextureData;\n\n    if (!this._inputTexture) {\n      this._inputTexture = createTexture(\n        _glOut,\n        _glOut.RGBA8,\n        textureWidth,\n        textureHeight,\n        _glOut.NEAREST,\n        _glOut.NEAREST\n      );\n    }\n\n    _glOut.viewport(0, 0, textureWidth, textureHeight);\n    _glOut.activeTexture(_glOut.TEXTURE1);\n\n    _glOut.bindTexture(\n      _glOut.TEXTURE_2D,\n      this._inputTexture\n    );\n    _glOut.texSubImage2D(\n      _glOut.TEXTURE_2D,\n      0,\n      0,\n      0,\n      textureWidth,\n      textureHeight,\n      _glOut.RGBA,\n      _glOut.UNSIGNED_BYTE,\n      data\n    );\n  }\n}\n"]}