{"version":3,"file":"WebGL2PipelineProcessingStage.js","sourceRoot":"","sources":["../../../../lib/processors/pipelines/webgl2pipeline/WebGL2PipelineProcessingStage.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,iEAA+G;AAwB/G;;GAEG;AACH;IAYE,uCACE,WAAwB,EACxB,YAA0B;QAVX,uBAAkB,GAAuB,IAAI,CAAC;QAC9C,mBAAc,GAAwB,IAAI,CAAC;QAYxD,IAAA,WAAW,GAET,WAAW,YAFF,EACX,WAAW,GACT,WAAW,YADF,CACG;QAER,IAAA,KAAK,GAAK,YAAY,MAAjB,CAAkB;QAC/B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QAGlB,IAAA,oBAAoB,GAqBlB,YAAY,qBArBM,EACpB,KAoBE,YAAY,OApBc,EAA5B,MAAM,mBAAG,KAAK,CAAC,MAAM,CAAC,MAAM,KAAA,EAC5B,KAmBE,YAAY,YAnBkC,EAAnC,iBAAiB,mBAAG,WAAW,GAAG,CAAC,KAAA,EAC1C,UAAU,GAkBd,YAAY,KAlBE,EAChB,KAiBE,YAAY,YAjBE,EAAhB,WAAW,mBAAG,EAAE,KAAA,EAChB,KAgBE,YAAY,mBAFb,EAdD,kBAAkB,mBAAG,qLAQnB,UAAU,KAAK,QAAQ;YACrB,CAAC,CAAC,oBAAoB;YACtB,CAAC,CAAC,EAAE,wEAIP,KAAA,EACD,KACE,YAAY,MADY,EAA1B,KAAK,mBAAG,KAAK,CAAC,MAAM,CAAC,KAAK,KAAA,CACX;QAEjB,IAAI,CAAC,iBAAiB,GAAG;YACvB,MAAM,QAAA;YACN,KAAK,OAAA;SACN,CAAC;QAEF,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAE5C,IAAI,CAAC,eAAe,GAAG,IAAA,qCAAa,EAClC,KAAK,EACL,KAAK,CAAC,eAAe,EACrB,oBAAoB,CACrB,CAAC;QAEF,IAAI,CAAC,aAAa,GAAG,IAAA,qCAAa,EAChC,KAAK,EACL,KAAK,CAAC,aAAa,EACnB,kBAAkB,CACnB,CAAC;QAEF,IAAI,CAAC,eAAe,GAAG,IAAA,kCAAU,EAC/B,KAAK,EACL;YACE,CAAC,GAAG,EAAE,CAAC,GAAG;YACV,GAAG,EAAE,CAAC,GAAG;YACT,CAAC,GAAG,EAAE,GAAG;YACT,GAAG,EAAE,GAAG;SACT,CACD,CAAC;QAEH,IAAI,CAAC,eAAe,GAAG,IAAA,kCAAU,EAC/B,KAAK,EACL;YACE,GAAG,EAAE,GAAG;YACR,GAAG,EAAE,GAAG;YACR,GAAG,EAAE,GAAG;YACR,GAAG,EAAE,GAAG;SACT,CACD,CAAC;QAEH,IAAI,UAAU,KAAK,SAAS,EAAE;YAC5B,IAAI,CAAC,cAAc,GAAG,IAAA,qCAAa,EACjC,KAAK,EACL,KAAK,CAAC,KAAK,EACX,KAAK,EACL,MAAM,CACP,CAAC;YACF,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC,iBAAiB,EAAE,CAAC;YACpD,KAAK,CAAC,eAAe,CACnB,KAAK,CAAC,WAAW,EACjB,IAAI,CAAC,kBAAkB,CACxB,CAAC;YACF,KAAK,CAAC,oBAAoB,CACxB,KAAK,CAAC,WAAW,EACjB,KAAK,CAAC,iBAAiB,EACvB,KAAK,CAAC,UAAU,EAChB,IAAI,CAAC,cAAc,EACnB,CAAC,CACF,CAAC;SACH;QAED,IAAM,OAAO,GAAG,IAAA,kDAA0B,EACxC,KAAK,EACL,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,eAAe,EACpB,IAAI,CAAC,eAAe,EACpB,IAAI,CAAC,eAAe,CACrB,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,IAAI,CAAC,eAAe;YAClB;gBACE,IAAI,EAAE,WAAW;gBACjB,IAAI,EAAE,KAAK;gBACX,MAAM,EAAE,CAAC,WAAW,CAAC;aACtB;WACE,WAAW,QACd,CAAC;IACL,CAAC;IAED,+CAAO,GAAP;QACQ,IAAA,KAOF,IAAI,EANN,eAAe,qBAAA,EACf,MAAM,YAAA,EACN,eAAe,qBAAA,EACf,QAAQ,cAAA,EACR,eAAe,qBAAA,EACf,aAAa,mBACP,CAAC;QACT,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC/B,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;QACrC,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;QACrC,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;QACnC,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;IACvC,CAAC;IAED,8CAAM,GAAN;QACQ,IAAA,KAUF,IAAI,EATN,MAAM,YAAA,EACN,yBAGC,EAFC,MAAM,YAAA,EACN,KAAK,WAAA,EAEP,kBAAkB,wBAAA,EAClB,cAAc,oBAAA,EACd,kBAAkB,wBAAA,EAClB,QAAQ,cACF,CAAC;QAET,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QACrC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAE5B,IAAI,cAAc,EAAE;YAClB,MAAM,CAAC,aAAa,CAClB,MAAM,CAAC,QAAQ;kBACb,kBAAkB,CACrB,CAAC;YACF,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,UAAU,EACjB,cAAc,CACf,CAAC;SACH;QACD,MAAM,CAAC,eAAe,CACpB,MAAM,CAAC,WAAW,EAClB,kBAAkB,CACnB,CAAC;QACF,MAAM,CAAC,UAAU,CACf,MAAM,CAAC,cAAc,EACrB,CAAC,EACD,CAAC,CACF,CAAC;IACJ,CAAC;IAES,uDAAe,GAAzB,UAA0B,WAA6B;QAC/C,IAAA,KAGF,IAAI,EAFN,MAAM,YAAA,EACN,QAAQ,cACF,CAAC;QAET,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAE5B,WAAW,CAAC,OAAO,CAAC,UAAC,EAAsB;gBAApB,IAAI,UAAA,EAAE,IAAI,UAAA,EAAE,MAAM,YAAA;YACvC,IAAM,kBAAkB,GAAG,MAAM;iBAC9B,kBAAkB,CACjB,QAAQ,EACR,IAAI,CACL,CAAC;YACJ,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;YAC5C,IAAI,QAAQ,EAAE;gBACZ,aAAa;gBACb,MAAM,CAAC,kBAAW,IAAI,CAAC,CAAC,CAAC,MAAG,CAAC,CAC3B,kBAAkB,EAClB,MAAM,CACP,CAAC;aACH;iBAAM;gBACL,aAAa;gBACb,MAAM,CAAC,iBAAU,MAAM,CAAC,MAAM,SAAG,IAAI,CAAC,CAAC,CAAC,CAAE,CAAC,OAA3C,MAAM,iBACJ,kBAAkB,GACf,MAAM,UACT;aACH;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACH,oCAAC;AAAD,CAAC,AAlND,IAkNC;AAlNY,sEAA6B","sourcesContent":["import { Dimensions } from '../../../types';\nimport { Pipeline } from '../Pipeline';\nimport { compileShader, createPipelineStageProgram, createTexture, initBuffer } from './webgl2PipelineHelpers';\n\ninterface InputConfig {\n  textureName: string;\n  textureUnit: number;\n}\n\ninterface OutputConfig {\n  fragmentShaderSource: string;\n  glOut: WebGL2RenderingContext;\n  height?: number;\n  textureUnit?: number;\n  type: 'canvas' | 'texture';\n  uniformVars?: UniformVarInfo[];\n  vertexShaderSource?: string;\n  width?: number;\n}\n\ninterface UniformVarInfo {\n  name: string;\n  type: 'float' | 'int' | 'uint' | 'float:v';\n  values: number[];\n}\n\n/**;\n * @private\n */\nexport class WebGL2PipelineProcessingStage implements Pipeline.Stage {\n  protected readonly _outputDimensions: Dimensions;\n  private readonly _fragmentShader: WebGLSampler;\n  private readonly _glOut: WebGL2RenderingContext;\n  private readonly _outputFramebuffer: WebGLBuffer | null = null;\n  private readonly _outputTexture: WebGLTexture | null = null;\n  private readonly _outputTextureUnit: number;\n  private readonly _positionBuffer: WebGLBuffer;\n  private readonly _program: WebGLProgram;\n  private readonly _texCoordBuffer: WebGLBuffer;\n  private readonly _vertexShader: WebGLShader;\n\n  constructor(\n    inputConfig: InputConfig,\n    outputConfig: OutputConfig\n  ) {\n    const {\n      textureName,\n      textureUnit,\n    } = inputConfig;\n\n    const { glOut } = outputConfig;\n    this._glOut = glOut;\n\n    const {\n      fragmentShaderSource,\n      height = glOut.canvas.height,\n      textureUnit: outputTextureUnit = textureUnit + 1,\n      type: outputType,\n      uniformVars = [],\n      vertexShaderSource = `#version 300 es\n        in vec2 a_position;\n        in vec2 a_texCoord;\n\n        out vec2 v_texCoord;\n\n        void main() {\n          gl_Position = vec4(a_position${\n        outputType === 'canvas'\n          ? ' * vec2(1.0, -1.0)'\n          : ''\n      }, 0.0, 1.0);\n          v_texCoord = a_texCoord;\n        }\n      `,\n      width = glOut.canvas.width\n    } = outputConfig;\n\n    this._outputDimensions = {\n      height,\n      width\n    };\n\n    this._outputTextureUnit = outputTextureUnit;\n\n    this._fragmentShader = compileShader(\n      glOut,\n      glOut.FRAGMENT_SHADER,\n      fragmentShaderSource\n    );\n\n    this._vertexShader = compileShader(\n      glOut,\n      glOut.VERTEX_SHADER,\n      vertexShaderSource\n    );\n\n    this._positionBuffer = initBuffer(\n      glOut,\n      [\n        -1.0, -1.0,\n        1.0, -1.0,\n        -1.0, 1.0,\n        1.0, 1.0,\n      ]\n    )!;\n\n    this._texCoordBuffer = initBuffer(\n      glOut,\n      [\n        0.0, 0.0,\n        1.0, 0.0,\n        0.0, 1.0,\n        1.0, 1.0,\n      ]\n    )!;\n\n    if (outputType === 'texture') {\n      this._outputTexture = createTexture(\n        glOut,\n        glOut.RGBA8,\n        width,\n        height\n      );\n      this._outputFramebuffer = glOut.createFramebuffer();\n      glOut.bindFramebuffer(\n        glOut.FRAMEBUFFER,\n        this._outputFramebuffer\n      );\n      glOut.framebufferTexture2D(\n        glOut.FRAMEBUFFER,\n        glOut.COLOR_ATTACHMENT0,\n        glOut.TEXTURE_2D,\n        this._outputTexture,\n        0\n      );\n    }\n\n    const program = createPipelineStageProgram(\n      glOut,\n      this._vertexShader,\n      this._fragmentShader,\n      this._positionBuffer,\n      this._texCoordBuffer\n    );\n    this._program = program;\n\n    this._setUniformVars([\n      {\n        name: textureName,\n        type: 'int',\n        values: [textureUnit]\n      },\n      ...uniformVars\n    ]);\n  }\n\n  cleanUp(): void {\n    const {\n      _fragmentShader,\n      _glOut,\n      _positionBuffer,\n      _program,\n      _texCoordBuffer,\n      _vertexShader\n    } = this;\n    _glOut.deleteProgram(_program);\n    _glOut.deleteBuffer(_texCoordBuffer);\n    _glOut.deleteBuffer(_positionBuffer);\n    _glOut.deleteShader(_vertexShader);\n    _glOut.deleteShader(_fragmentShader);\n  }\n\n  render(): void {\n    const {\n      _glOut,\n      _outputDimensions: {\n        height,\n        width\n      },\n      _outputFramebuffer,\n      _outputTexture,\n      _outputTextureUnit,\n      _program\n    } = this;\n\n    _glOut.viewport(0, 0, width, height);\n    _glOut.useProgram(_program);\n\n    if (_outputTexture) {\n      _glOut.activeTexture(\n        _glOut.TEXTURE0\n        + _outputTextureUnit\n      );\n      _glOut.bindTexture(\n        _glOut.TEXTURE_2D,\n        _outputTexture\n      );\n    }\n    _glOut.bindFramebuffer(\n      _glOut.FRAMEBUFFER,\n      _outputFramebuffer\n    );\n    _glOut.drawArrays(\n      _glOut.TRIANGLE_STRIP,\n      0,\n      4\n    );\n  }\n\n  protected _setUniformVars(uniformVars: UniformVarInfo[]) {\n    const {\n      _glOut,\n      _program\n    } = this;\n\n    _glOut.useProgram(_program);\n\n    uniformVars.forEach(({ name, type, values }) => {\n      const uniformVarLocation = _glOut\n        .getUniformLocation(\n          _program,\n          name\n        );\n      const isVector = type.split(':')[1] === 'v';\n      if (isVector) {\n        // @ts-ignore\n        _glOut[`uniform1${type[0]}v`](\n          uniformVarLocation,\n          values\n        );\n      } else {\n        // @ts-ignore\n        _glOut[`uniform${values.length}${type[0]}`](\n          uniformVarLocation,\n          ...values\n        );\n      }\n    });\n  }\n}\n"]}