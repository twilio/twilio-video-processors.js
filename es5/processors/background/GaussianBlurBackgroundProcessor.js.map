{"version":3,"file":"GaussianBlurBackgroundProcessor.js","sourceRoot":"","sources":["../../../lib/processors/background/GaussianBlurBackgroundProcessor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,6CAAuE;AACvE,6DAAwF;AACxF,uFAAgJ;AAgBhJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuCG;AACH;IAAqD,mDAAmB;IAKtE;;;;OAIG;IACH,yCAAY,OAA+C;QAA3D,iBA6BC;QA3BG,IAAA,KAIE,OAAO,iBAJ4B,EAArC,gBAAgB,mBAAG,8BAAkB,KAAA,EACrC,KAGE,OAAO,yBAHuB,EAAhC,wBAAwB,mBAAG,KAAK,KAAA,EAChC,KAEE,OAAO,eAFwB,EAAjC,cAAc,mBAAG,4BAAgB,KAAA,EACjC,KACE,OAAO,aADU,EAAnB,YAAY,mBAAG,IAAI,KAAA,CACT;QAEZ,IAAM,UAAU,GAAG,OAAO;aACvB,UAAU;aACV,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAE7B,IAAM,kCAAkC,GAAG,YAAY;YACrD,CAAC,CAAC,0EAA4C;YAC9C,CAAC,CAAC,qEAAuC,CAAC;QAE5C,IAAM,2BAA2B,GAAG,IAAI,kCAAkC,CAAC;YACzE,UAAU,YAAA;YACV,gBAAgB,kBAAA;YAChB,wBAAwB,0BAAA;YACxB,cAAc,gBAAA;SACf,CAAC,CAAC;gBAEH,kBACE,2BAA2B,EAC3B,OAAO,CACR;QAnCK,uBAAiB,GAAW,8BAAkB,CAAC;QACvD,8CAA8C;QAC7B,WAAK,GAAW,iCAAiC,CAAC;QAmCjE,KAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAiB,CAAC;;IACpD,CAAC;IAKD,sBAAI,6DAAgB;QAHpB;;WAEG;aACH;YACE,OAAO,IAAI,CAAC,iBAAiB,CAAC;QAChC,CAAC;QAED;;WAEG;aACH,UAAqB,MAAc;YACjC,IAAI,CAAC,MAAM,EAAE;gBACX,OAAO,CAAC,IAAI,CAAC,oDAA6C,8BAAkB,iBAAc,CAAC,CAAC;gBAC5F,MAAM,GAAG,8BAAkB,CAAC;aAC7B;YACD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC;YAC/B,IAAI,CAAC,4BAAuH;iBAC1H,mBAAmB,CAAC,IAAI,CAAC,iBAAiB,CAAC;iBAC3C,KAAK,CAAC;gBACL,UAAU;YACZ,CAAC,CAAC,CAAC;QACP,CAAC;;;OAhBA;IAiBH,sCAAC;AAAD,CAAC,AA/DD,CAAqD,yCAAmB,GA+DvE;AA/DY,0EAA+B","sourcesContent":["import { BLUR_FILTER_RADIUS, MASK_BLUR_RADIUS } from '../../constants';\nimport { BackgroundProcessor, BackgroundProcessorOptions } from './BackgroundProcessor';\nimport { GaussianBlurBackgroundProcessorPipeline, GaussianBlurBackgroundProcessorPipelineProxy } from './pipelines/backgroundprocessorpipeline';\n\n/**\n * Options passed to [[GaussianBlurBackgroundProcessor]] constructor.\n */\nexport interface GaussianBlurBackgroundProcessorOptions extends BackgroundProcessorOptions {\n  /**\n   * The background blur filter radius to use in pixels.\n   * @default\n   * ```html\n   * 15\n   * ```\n   */\n  blurFilterRadius?: number;\n}\n\n/**\n * The GaussianBlurBackgroundProcessor, when added to a VideoTrack,\n * applies a gaussian blur filter on the background in each video frame\n * and leaves the foreground (person(s)) untouched. Each instance of\n * GaussianBlurBackgroundProcessor should be added to only one VideoTrack\n * at a time to prevent overlapping of image data from multiple VideoTracks.\n *\n * @example\n *\n * ```ts\n * import { createLocalVideoTrack } from 'twilio-video';\n * import { GaussianBlurBackgroundProcessor } from '@twilio/video-processors';\n *\n * let blurBackground: GaussianBlurBackgroundProcessor;\n *\n * (async() => {\n *   blurBackground = new GaussianBlurBackgroundProcessor({\n *     assetsPath: 'https://my-server-path/assets'\n *   });\n *   await blurBackground.loadModel();\n *\n *   const track = await createLocalVideoTrack({\n *     // Increasing the capture resolution decreases the output FPS\n *     // especially on browsers that do not support SIMD\n *     // such as desktop Safari and iOS browsers, or on Chrome\n *     // with capture resolutions above 640x480 for webgl2.\n *     width: 640,\n *     height: 480,\n *\n *     // Any frame rate above 24 fps on desktop browsers increase CPU\n *     // usage without noticeable increase in quality.\n *     frameRate: 24\n *   });\n *   track.addProcessor(virtualBackground, {\n *     inputFrameBufferType: 'videoframe',\n *     outputFrameBufferContextType: 'bitmaprenderer'\n *   });\n * })();\n * ```\n */\nexport class GaussianBlurBackgroundProcessor extends BackgroundProcessor {\n  private _blurFilterRadius: number = BLUR_FILTER_RADIUS;\n  // tslint:disable-next-line no-unused-variable\n  private readonly _name: string = 'GaussianBlurBackgroundProcessor';\n\n  /**\n   * Construct a GaussianBlurBackgroundProcessor. Default values will be used for\n   * any missing properties in [[GaussianBlurBackgroundProcessorOptions]], and\n   * invalid properties will be ignored.\n   */\n  constructor(options: GaussianBlurBackgroundProcessorOptions) {\n    const {\n      blurFilterRadius = BLUR_FILTER_RADIUS,\n      deferInputFrameDownscale = false,\n      maskBlurRadius = MASK_BLUR_RADIUS,\n      useWebWorker = true\n    } = options;\n\n    const assetsPath = options\n      .assetsPath\n      .replace(/([^/])$/, '$1/');\n\n    const BackgroundProcessorPipelineOrProxy = useWebWorker\n      ? GaussianBlurBackgroundProcessorPipelineProxy\n      : GaussianBlurBackgroundProcessorPipeline;\n\n    const backgroundProcessorPipeline = new BackgroundProcessorPipelineOrProxy({\n      assetsPath,\n      blurFilterRadius,\n      deferInputFrameDownscale,\n      maskBlurRadius\n    });\n\n    super(\n      backgroundProcessorPipeline,\n      options\n    );\n\n    this.blurFilterRadius = options.blurFilterRadius!;\n  }\n\n  /**\n   * The current background blur filter radius in pixels.\n   */\n  get blurFilterRadius(): number {\n    return this._blurFilterRadius;\n  }\n\n  /**\n   * Set a new background blur filter radius in pixels.\n   */\n  set blurFilterRadius(radius: number) {\n    if (!radius) {\n      console.warn(`Valid blur filter radius not found. Using ${BLUR_FILTER_RADIUS} as default.`);\n      radius = BLUR_FILTER_RADIUS;\n    }\n    this._blurFilterRadius = radius;\n    (this._backgroundProcessorPipeline as GaussianBlurBackgroundProcessorPipeline | GaussianBlurBackgroundProcessorPipelineProxy)\n      .setBlurFilterRadius(this._blurFilterRadius)\n      .catch(() => {\n        /* noop */\n      });\n  }\n}\n"]}