{"version":3,"file":"GaussianBlurBackgroundProcessor.js","sourceRoot":"","sources":["../../../lib/processors/background/GaussianBlurBackgroundProcessor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,6DAAwF;AACxF,6CAA6D;AAgB7D;;;;;;;;;;;;;;;;;;;;GAoBG;AACH;IAAqD,mDAAmB;IAItE;;;;OAIG;IACH,yCAAY,OAAgD;QAA5D,YACE,kBAAM,OAAO,CAAC,SAEf;QAVO,uBAAiB,GAAW,sCAA0B,CAAC;QAS7D,KAAI,CAAC,gBAAgB,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAiB,CAAC;;IACrD,CAAC;IAKD,sBAAI,6DAAgB;QAHpB;;WAEG;aACH;YACE,OAAO,IAAI,CAAC,iBAAiB,CAAC;QAChC,CAAC;QAED;;WAEG;aACH,UAAqB,MAAc;YACjC,IAAI,CAAC,MAAM,EAAE;gBACX,OAAO,CAAC,IAAI,CAAC,+CAA6C,sCAA0B,iBAAc,CAAC,CAAC;gBACpG,MAAM,GAAG,sCAA0B,CAAC;aACrC;YACD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC;QAClC,CAAC;;;OAXA;IAaS,wDAAc,GAAxB,UAAyB,UAA2B;QAClD,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,UAAQ,IAAI,CAAC,iBAAiB,QAAK,CAAC;QACjE,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAClD,CAAC;IACH,sCAAC;AAAD,CAAC,AApCD,CAAqD,yCAAmB,GAoCvE;AApCY,0EAA+B","sourcesContent":["import { BackgroundProcessor, BackgroundProcessorOptions } from './BackgroundProcessor';\nimport { DEFAULT_BLUR_FILTER_RADIUS } from '../../constants';\n\n/**\n * Options passed to [[GaussianBlurBackgroundProcessor]] constructor.\n */\nexport interface GaussianBlurBackgroundProcessorOptions extends BackgroundProcessorOptions {\n  /**\n   * The background blur filter radius to use in pixels.\n   * @default\n   * ```html\n   * 5\n   * ```\n   */\n  blurFilterRadius?: number;\n}\n\n/**\n * The GaussianBlurBackgroundProcessor, when added to a VideoTrack,\n * applies a gaussian blur filter on the background in each video frame\n * and leaves the foreground (person(s)) untouched.\n *\n * @example\n *\n * ```ts\n * import { createLocalVideoTrack } from 'twilio-video';\n * import { GaussianBlurBackgroundProcessor } from '@twilio/video-processors';\n *\n * const blurBackground = new GaussianBlurBackgroundProcessor();\n *\n * createLocalVideoTrack({\n *   width: 640,\n *   height: 480\n * }).then(track => {\n *   track.addProcessor(blurBackground);\n * });\n * ```\n */\nexport class GaussianBlurBackgroundProcessor extends BackgroundProcessor {\n\n  private _blurFilterRadius: number = DEFAULT_BLUR_FILTER_RADIUS;\n\n  /**\n   * Construct a GaussianBlurBackgroundProcessor. Default values will be used for\n   * any missing properties in [[GaussianBlurBackgroundProcessorOptions]], and\n   * invalid properties will be ignored.\n   */\n  constructor(options?: GaussianBlurBackgroundProcessorOptions) {\n    super(options);\n    this.blurFilterRadius = options?.blurFilterRadius!;\n  }\n\n  /**\n   * The current background blur filter radius in pixels.\n   */\n  get blurFilterRadius(): number {\n    return this._blurFilterRadius;\n  }\n\n  /**\n   * Set a new background blur filter radius in pixels.\n   */\n  set blurFilterRadius(radius: number) {\n    if (!radius) {\n      console.warn(`Valid blur filter radius not found. Using ${DEFAULT_BLUR_FILTER_RADIUS} as default.`);\n      radius = DEFAULT_BLUR_FILTER_RADIUS;\n    }\n    this._blurFilterRadius = radius;\n  }\n\n  protected _setBackground(inputFrame: OffscreenCanvas): void {\n    this._outputContext.filter = `blur(${this._blurFilterRadius}px)`;\n    this._outputContext.drawImage(inputFrame, 0, 0);\n  }\n}\n"]}