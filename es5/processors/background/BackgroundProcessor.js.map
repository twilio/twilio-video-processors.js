{"version":3,"file":"BackgroundProcessor.js","sourceRoot":"","sources":["../../../lib/processors/background/BackgroundProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import '@tensorflow/tfjs-backend-webgl';\nimport '@tensorflow/tfjs-backend-cpu';\nimport { ModelConfig, PersonInferenceConfig } from '@tensorflow-models/body-pix/dist/body_pix_model';\nimport { BodyPix, load as loadModel } from '@tensorflow-models/body-pix';\nimport { Processor } from '../Processor';\nimport { Benchmark } from '../../utils/Benchmark';\nimport { version } from '../../utils/version';\nimport { Dimensions } from '../../types';\n\nimport {\n  BODYPIX_INFERENCE_DIMENSIONS,\n  DEBOUNCE,\n  HISTORY_COUNT,\n  INFERENCE_CONFIG,\n  MASK_BLUR_RADIUS,\n  MODEL_CONFIG,\n  MODEL_NAME,\n  PERSON_PROBABILITY_THRESHOLD,\n  TFLITE_LOADER_NAME,\n  TFLITE_SIMD_LOADER_NAME,\n  WASM_INFERENCE_DIMENSIONS,\n} from '../../constants';\n\n/**\n * @private\n */\nexport interface BackgroundProcessorOptions {\n  /**\n   * The VideoProcessors load assets dynamically depending on certain browser features.\n   * You need to serve all the assets and provide the root path so they can be referenced properly.\n   * These assets can be copied from the `dist/build` folder which you can add as part of your deployment process.\n   * @example\n   * <br/>\n   * <br/>\n   * For virtual background:\n   * <br/>\n   *\n   * ```ts\n   * const virtualBackground = new VirtualBackgroundProcessor({\n   *   assetsPath: 'https://my-server-path/assets',\n   *   backgroundImage: img,\n   * });\n   * await virtualBackground.loadModel();\n   * ```\n   *\n   * <br/>\n   * For blur background:\n   * <br/>\n   *\n   * ```ts\n   * const blurBackground = new GaussianBlurBackgroundProcessor({\n   *   assetsPath: 'https://my-server-path/assets'\n   * });\n   * await blurBackground.loadModel();\n   * ```\n   */\n  assetsPath: string;\n\n  /**\n   * @private\n   */\n  debounce?: number;\n\n  /**\n   * @private\n   */\n  historyCount?: number;\n\n  /**\n   * @private\n   */\n  inferenceConfig?: PersonInferenceConfig;\n\n  /**\n   * @private\n   */\n  inferenceDimensions?: Dimensions;\n\n  /**\n   * The blur radius to use when smoothing out the edges of the person's mask.\n   * @default\n   * ```html\n   * 5\n   * ```\n   */\n  maskBlurRadius?: number;\n\n  /**\n   * @private\n   */\n  personProbabilityThreshold?: number;\n\n  /**\n   * @private\n   */\n   useWasm?: boolean;\n}\n\n/**\n * @private\n */\nexport abstract class BackgroundProcessor extends Processor {\n  private static _model: BodyPix | null = null;\n  private static async _loadModel(config: ModelConfig = MODEL_CONFIG): Promise<void> {\n    BackgroundProcessor._model = await loadModel(config)\n      .catch((error: any) => console.error('Unable to load model.', error)) || null;\n  }\n  protected _outputCanvas: HTMLCanvasElement;\n  protected _outputContext: CanvasRenderingContext2D;\n\n  private _assetsPath: string;\n  private _benchmark: Benchmark;\n  private _currentMask: Uint8ClampedArray | Uint8Array = new Uint8ClampedArray();\n  private _debounce: number = DEBOUNCE;\n  private _dummyImageData: ImageData = new ImageData(1, 1);\n  private _historyCount: number = HISTORY_COUNT;\n  private _inferenceConfig: PersonInferenceConfig = INFERENCE_CONFIG;\n  private _inferenceDimensions: Dimensions = WASM_INFERENCE_DIMENSIONS;\n  private _inputCanvas: HTMLCanvasElement;\n  private _inputContext: CanvasRenderingContext2D;\n  private _inputMemoryOffset: number = 0;\n  // tslint:disable-next-line no-unused-variable\n  private _isSimdEnabled: boolean | null = null;\n  private _maskBlurRadius: number = MASK_BLUR_RADIUS;\n  private _maskCanvas: OffscreenCanvas;\n  private _maskContext: OffscreenCanvasRenderingContext2D;\n  private _masks: (Uint8ClampedArray | Uint8Array)[];\n  private _maskUsageCounter: number = 0;\n  private _outputMemoryOffset: number = 0;\n  private _personProbabilityThreshold: number = PERSON_PROBABILITY_THRESHOLD;\n  private _tflite: any;\n  private _useWasm: boolean;\n  // tslint:disable-next-line no-unused-variable\n  private readonly _version: string = version;\n\n  constructor(options: BackgroundProcessorOptions) {\n    super();\n\n    if (typeof options.assetsPath !== 'string') {\n      throw new Error('assetsPath parameter is missing');\n    }\n    let assetsPath = options.assetsPath;\n    if (assetsPath && assetsPath[assetsPath.length - 1] !== '/') {\n      assetsPath += '/';\n    }\n\n    this.maskBlurRadius = options.maskBlurRadius!;\n    this._assetsPath = assetsPath;\n    this._debounce = options.debounce! || DEBOUNCE;\n    this._historyCount = options.historyCount! || HISTORY_COUNT;\n    this._inferenceConfig = options.inferenceConfig! || INFERENCE_CONFIG;\n    this._personProbabilityThreshold = options.personProbabilityThreshold! || PERSON_PROBABILITY_THRESHOLD;\n    this._useWasm = typeof options.useWasm === 'boolean' ? options.useWasm : true;\n    this._inferenceDimensions = options.inferenceDimensions! ||\n      (this._useWasm ? WASM_INFERENCE_DIMENSIONS : BODYPIX_INFERENCE_DIMENSIONS);\n\n    this._benchmark = new Benchmark();\n    this._inputCanvas = document.createElement('canvas');\n    this._inputContext = this._inputCanvas.getContext('2d') as CanvasRenderingContext2D;\n    this._maskCanvas = new OffscreenCanvas(1, 1);\n    this._maskContext = this._maskCanvas.getContext('2d') as OffscreenCanvasRenderingContext2D;\n    this._outputCanvas = document.createElement('canvas');\n    this._outputContext = this._outputCanvas.getContext('2d') as CanvasRenderingContext2D;\n    this._masks = [];\n  }\n\n  /**\n   * The current blur radius when smoothing out the edges of the person's mask.\n   */\n  get maskBlurRadius(): number {\n    return this._maskBlurRadius;\n  }\n\n  /**\n   * Set a new blur radius to be used when smoothing out the edges of the person's mask.\n   */\n  set maskBlurRadius(radius: number) {\n    if (typeof radius !== 'number' || radius < 0) {\n      console.warn(`Valid mask blur radius not found. Using ${MASK_BLUR_RADIUS} as default.`);\n      radius = MASK_BLUR_RADIUS;\n    }\n    this._maskBlurRadius = radius;\n  }\n\n  /**\n   * Load the segmentation model.\n   * Call this method before attaching the processor to ensure\n   * video frames are processed correctly.\n   */\n   async loadModel() {\n    const [, tflite, modelResponse ] = await Promise.all([\n      BackgroundProcessor._loadModel(),\n      this._loadTwilioTfLite(),\n      fetch(this._assetsPath + MODEL_NAME),\n    ]);\n\n    const model = await modelResponse.arrayBuffer();\n    const modelBufferOffset = tflite._getModelBufferMemoryOffset();\n    tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n    tflite._loadModel(model.byteLength);\n\n    this._inputMemoryOffset = tflite._getInputMemoryOffset() / 4;\n    this._outputMemoryOffset = tflite._getOutputMemoryOffset() / 4;\n\n    this._tflite = tflite;\n  }\n\n  /**\n   * Apply a transform to the background of an input video frame and leaving\n   * the foreground (person(s)) untouched. Any exception detected will\n   * result in the frame being dropped.\n   * @param inputFrameBuffer - The source of the input frame to process.\n   * @param outputFrameBuffer - The output frame buffer to use to draw the processed frame.\n   */\n  async processFrame(inputFrameBuffer: OffscreenCanvas, outputFrameBuffer: HTMLCanvasElement): Promise<void> {\n    if (!BackgroundProcessor._model || !this._tflite) {\n      return;\n    }\n    if (!inputFrameBuffer || !outputFrameBuffer) {\n      throw new Error('Missing input or output frame buffer');\n    }\n    this._benchmark.end('captureFrameDelay');\n    this._benchmark.start('processFrameDelay');\n\n    const inputFrame = inputFrameBuffer;\n    const { width: captureWidth, height: captureHeight } = inputFrame;\n    const { width: inferenceWidth, height: inferenceHeight } = this._inferenceDimensions;\n\n    if (this._outputCanvas !== outputFrameBuffer) {\n      this._outputCanvas = outputFrameBuffer;\n      this._outputContext = outputFrameBuffer.getContext('2d') as CanvasRenderingContext2D;\n    }\n\n    // Only set the canvas' dimensions if they have changed to prevent unnecessary redraw\n    let reInitDummyImage = false;\n    if (this._inputCanvas.width !== inferenceWidth) {\n      this._inputCanvas.width = inferenceWidth;\n      this._maskCanvas.width = inferenceWidth;\n      reInitDummyImage = true;\n    }\n    if (this._inputCanvas.height !== inferenceHeight) {\n      this._inputCanvas.height = inferenceHeight;\n      this._maskCanvas.height = inferenceHeight;\n      reInitDummyImage = true;\n    }\n    if (reInitDummyImage) {\n      this._dummyImageData = new ImageData(\n        new Uint8ClampedArray(inferenceWidth * inferenceHeight * 4),\n        inferenceWidth, inferenceHeight);\n    }\n\n    const personMask = await this._createPersonMask(inputFrame);\n\n    this._benchmark.start('imageCompositionDelay');\n    this._maskContext.putImageData(personMask, 0, 0);\n    this._outputContext.save();\n    this._outputContext.filter = `blur(${this._maskBlurRadius}px)`;\n    this._outputContext.globalCompositeOperation = 'copy';\n    this._outputContext.drawImage(this._maskCanvas, 0, 0, captureWidth, captureHeight);\n    this._outputContext.filter = 'none';\n    this._outputContext.globalCompositeOperation = 'source-in';\n    this._outputContext.drawImage(inputFrame, 0, 0, captureWidth, captureHeight);\n    this._outputContext.globalCompositeOperation = 'destination-over';\n    this._setBackground(inputFrame);\n    this._outputContext.restore();\n\n    this._benchmark.end('imageCompositionDelay');\n    this._benchmark.end('processFrameDelay');\n    this._benchmark.end('totalProcessingDelay');\n\n    // NOTE (csantos): Start the benchmark from here so we can include the delay from the Video sdk\n    // for a more accurate fps\n    this._benchmark.start('totalProcessingDelay');\n    this._benchmark.start('captureFrameDelay');\n  }\n\n  protected abstract _setBackground(inputFrame: OffscreenCanvas): void;\n\n  private _addMask(mask: Uint8ClampedArray | Uint8Array) {\n    if (this._masks.length >= this._historyCount) {\n      this._masks.splice(0, this._masks.length - this._historyCount + 1);\n    }\n    this._masks.push(mask);\n  }\n\n  private _applyAlpha(imageData: ImageData) {\n    const weightedSum = this._masks.reduce((sum, mask, j) => sum + (j + 1) * (j + 1), 0);\n    const pixels = imageData.height * imageData.width;\n    for (let i = 0; i < pixels; i++) {\n      const w = this._masks.reduce((sum, mask, j) => sum + mask[i] * (j + 1) * (j + 1), 0) / weightedSum;\n      imageData.data[i * 4 + 3] = Math.round(w * 255);\n    }\n  }\n\n  private async _createPersonMask(inputFrame: OffscreenCanvas): Promise<ImageData> {\n    let imageData = this._dummyImageData;\n    const shouldRunInference = this._maskUsageCounter < 1;\n\n    this._benchmark.start('inputImageResizeDelay');\n    if (shouldRunInference) {\n      imageData = this._getResizedInputImageData(inputFrame);\n    }\n    this._benchmark.end('inputImageResizeDelay');\n\n    this._benchmark.start('segmentationDelay');\n    if (shouldRunInference) {\n      this._currentMask = this._useWasm\n        ? this._runTwilioTfLiteInference(imageData)\n        : await this._runBodyPixInference(imageData);\n      this._maskUsageCounter = this._debounce;\n    }\n    this._addMask(this._currentMask);\n    this._applyAlpha(imageData);\n    this._maskUsageCounter--;\n    this._benchmark.end('segmentationDelay');\n\n    return imageData;\n  }\n\n  private _getResizedInputImageData(inputFrame: OffscreenCanvas): ImageData {\n    const { width, height } = this._inputCanvas;\n    this._inputContext.drawImage(inputFrame, 0, 0, width, height);\n    const imageData = this._inputContext.getImageData(0, 0, width, height);\n    return imageData;\n  }\n\n  private _loadJs(url: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.onload = () => resolve();\n      script.onerror = reject;\n      document.head.append(script);\n      script.src = url;\n    });\n  }\n\n  private async _loadTwilioTfLite(): Promise<any> {\n    let tflite: any;\n    await this._loadJs(this._assetsPath + TFLITE_SIMD_LOADER_NAME);\n\n    try {\n      tflite = await window.createTwilioTFLiteSIMDModule();\n      this._isSimdEnabled = true;\n    } catch {\n      console.warn('SIMD not supported. You may experience poor quality of background replacement.');\n      await this._loadJs(this._assetsPath + TFLITE_LOADER_NAME);\n      tflite = await window.createTwilioTFLiteModule();\n      this._isSimdEnabled = false;\n    }\n    return tflite;\n  }\n\n  private async _runBodyPixInference(inputImage: ImageData): Promise<Uint8Array> {\n    const segment = await BackgroundProcessor._model!.segmentPerson(inputImage, this._inferenceConfig);\n    return segment.data;\n  }\n\n  private _runTwilioTfLiteInference(inputImage: ImageData): Uint8ClampedArray {\n    const { _inferenceDimensions: { width, height }, _inputMemoryOffset: offset, _tflite: tflite } = this;\n    const pixels = width * height;\n\n    for (let i = 0; i < pixels; i++) {\n      tflite.HEAPF32[offset + i * 3] = inputImage.data[i * 4] / 255;\n      tflite.HEAPF32[offset + i * 3 + 1] = inputImage.data[i * 4 + 1] / 255;\n      tflite.HEAPF32[offset + i * 3 + 2] = inputImage.data[i * 4 + 2] / 255;\n    }\n\n    tflite._runInference();\n    const inferenceData = new Uint8ClampedArray(pixels * 4);\n\n    for (let i = 0; i < pixels; i++) {\n      const personProbability = tflite.HEAPF32[this._outputMemoryOffset + i];\n      inferenceData[i] = Number(personProbability >= this._personProbabilityThreshold) * personProbability;\n    }\n\n    return inferenceData;\n  }\n}\n"]}