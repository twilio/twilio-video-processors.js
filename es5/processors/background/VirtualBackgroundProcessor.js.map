{"version":3,"file":"VirtualBackgroundProcessor.js","sourceRoot":"","sources":["../../../lib/processors/background/VirtualBackgroundProcessor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,qCAAuC;AACvC,6CAAmD;AACnD,6DAAwF;AACxF,uFAAsI;AAyBtI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AACH;IAAgD,8CAAmB;IAMjE;;;;OAIG;IACH,oCAAY,OAA0C;QAAtD,iBA+BC;QA7BG,IAAA,eAAe,GAKb,OAAO,gBALM,EACf,KAIE,OAAO,yBAJuB,EAAhC,wBAAwB,mBAAG,KAAK,KAAA,EAChC,KAGE,OAAO,QAHc,EAAvB,OAAO,mBAAG,gBAAQ,CAAC,IAAI,KAAA,EACvB,KAEE,OAAO,eAFwB,EAAjC,cAAc,mBAAG,4BAAgB,KAAA,EACjC,KACE,OAAO,aADU,EAAnB,YAAY,mBAAG,IAAI,KAAA,CACT;QAEZ,IAAM,UAAU,GAAG,OAAO;aACvB,UAAU;aACV,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAE7B,IAAM,yCAAyC,GAAG,YAAY;YAC5D,CAAC,CAAC,qEAAuC;YACzC,CAAC,CAAC,gEAAkC,CAAC;QAEvC,IAAM,2BAA2B,GAAG,IAAI,yCAAyC,CAAC;YAChF,UAAU,YAAA;YACV,wBAAwB,0BAAA;YACxB,OAAO,SAAA;YACP,cAAc,gBAAA;SACf,CAAC,CAAC;gBAEH,kBACE,2BAA2B,EAC3B,OAAO,CACR;QAnCH,8CAA8C;QAC7B,WAAK,GAAW,4BAA4B,CAAC;QAoC5D,KAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;;IACzB,CAAC;IAKD,sBAAI,uDAAe;QAHnB;;WAEG;aACH;YACE,OAAO,IAAI,CAAC,gBAAgB,CAAC;QAC/B,CAAC;QAED;;;;;WAKG;aACH,UAAoB,KAAuB;YAA3C,iBAWC;YAVC,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;gBACrD,MAAM,IAAI,KAAK,CAAC,iGAAiG,CAAC,CAAC;aACpH;YACD,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;YAC9B,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAC3C,UAAC,WAAW,IAAK,OAAC,KAAI,CAAC,4BAA6G;iBACjI,kBAAkB,CAAC,WAAW,CAAC,EADjB,CACiB,CACnC,CAAC,KAAK,CAAC;gBACN,UAAU;YACZ,CAAC,CAAC,CAAC;QACL,CAAC;;;OAnBA;IAwBD,sBAAI,+CAAO;QAHX;;WAEG;aACH;YACE,OAAO,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;QAED;;WAEG;aACH,UAAY,OAAiB;YAC3B,IAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,gBAAQ,CAAC,CAAC;YACzC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAiB,CAAC,EAAE;gBAC3C,OAAO,CAAC,IAAI,CAAC,0CAAmC,gBAAQ,CAAC,IAAI,kBAAe,CAAC,CAAC;gBAC9E,OAAO,GAAG,gBAAQ,CAAC,IAAI,CAAC;aACzB;YACD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,4BAA6G;iBAChH,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;iBACzB,KAAK,CAAC;gBACL,UAAU;YACZ,CAAC,CAAC,CAAC;QACP,CAAC;;;OAjBA;IAkBH,iCAAC;AAAD,CAAC,AA7FD,CAAgD,yCAAmB,GA6FlE;AA7FY,gEAA0B","sourcesContent":["import { ImageFit } from '../../types';\nimport { MASK_BLUR_RADIUS } from '../../constants';\nimport { BackgroundProcessor, BackgroundProcessorOptions } from './BackgroundProcessor';\nimport { VirtualBackgroundProcessorPipeline, VirtualBackgroundProcessorPipelineProxy } from './pipelines/backgroundprocessorpipeline';\n\n/**\n * Options passed to [[VirtualBackgroundProcessor]] constructor.\n */\nexport interface VirtualBackgroundProcessorOptions extends BackgroundProcessorOptions {\n  /**\n   * The HTMLImageElement to use for background replacement.\n   * An error will be raised if the image hasn't been fully loaded yet. Additionally, the image must follow\n   * [security guidelines](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image)\n   * when loading the image from a different origin. Failing to do so will result to an empty output frame.\n   */\n  backgroundImage: HTMLImageElement;\n\n  /**\n   * The [[ImageFit]] to use for positioning of the background image in the viewport. Only the Canvas2D [[Pipeline]]\n   * supports this option. WebGL2 ignores this option and falls back to Cover.\n   * @default\n   * ```html\n   * 'Fill'\n   * ```\n   */\n  fitType?: ImageFit;\n}\n\n/**\n * The VirtualBackgroundProcessor, when added to a VideoTrack,\n * replaces the background in each video frame with a given image,\n * and leaves the foreground (person(s)) untouched. Each instance of\n * VirtualBackgroundProcessor should be added to only one VideoTrack\n * at a time to prevent overlapping of image data from multiple VideoTracks.\n *\n * @example\n *\n * ```ts\n * import { createLocalVideoTrack } from 'twilio-video';\n * import { VirtualBackgroundProcessor } from '@twilio/video-processors';\n *\n * let virtualBackground: VirtualBackgroundProcessor;\n * const img = new Image();\n *\n * img.onload = async () => {\n *   virtualBackground = new VirtualBackgroundProcessor({\n *     assetsPath: 'https://my-server-path/assets',\n *     backgroundImage: img\n *   });\n *   await virtualBackground.loadModel();\n *\n *   const track = await createLocalVideoTrack({\n *     // Increasing the capture resolution decreases the output FPS\n *     // especially on browsers that do not support SIMD\n *     // such as desktop Safari and iOS browsers, or on Chrome\n *     // with capture resolutions above 640x480 for webgl2.\n *     width: 640,\n *     height: 480,\n *\n *     // Any frame rate above 24 fps on desktop browsers increase CPU\n *     // usage without noticeable increase in quality.\n *     frameRate: 24\n *   });\n *   track.addProcessor(virtualBackground, {\n *     inputFrameBufferType: 'videoframe',\n *     outputFrameBufferContextType: 'bitmaprenderer'\n *   });\n * };\n *\n * img.src = '/background.jpg';\n * ```\n */\nexport class VirtualBackgroundProcessor extends BackgroundProcessor {\n  private _backgroundImage!: HTMLImageElement;\n  private _fitType!: ImageFit;\n  // tslint:disable-next-line no-unused-variable\n  private readonly _name: string = 'VirtualBackgroundProcessor';\n\n  /**\n   * Construct a VirtualBackgroundProcessor. Default values will be used for\n   * any missing optional properties in [[VirtualBackgroundProcessorOptions]],\n   * and invalid properties will be ignored.\n   */\n  constructor(options: VirtualBackgroundProcessorOptions) {\n    const {\n      backgroundImage,\n      deferInputFrameDownscale = false,\n      fitType = ImageFit.Fill,\n      maskBlurRadius = MASK_BLUR_RADIUS,\n      useWebWorker = true\n    } = options;\n\n    const assetsPath = options\n      .assetsPath\n      .replace(/([^/])$/, '$1/');\n\n    const VirtualBackgroundProcessorPipelineOrProxy = useWebWorker\n      ? VirtualBackgroundProcessorPipelineProxy\n      : VirtualBackgroundProcessorPipeline;\n\n    const backgroundProcessorPipeline = new VirtualBackgroundProcessorPipelineOrProxy({\n      assetsPath,\n      deferInputFrameDownscale,\n      fitType,\n      maskBlurRadius\n    });\n\n    super(\n      backgroundProcessorPipeline,\n      options\n    );\n\n    this.backgroundImage = backgroundImage;\n    this.fitType = fitType;\n  }\n\n  /**\n   * The HTMLImageElement representing the current background image.\n   */\n  get backgroundImage(): HTMLImageElement {\n    return this._backgroundImage;\n  }\n\n  /**\n   * Set an HTMLImageElement as the new background image.\n   * An error will be raised if the image hasn't been fully loaded yet. Additionally, the image must follow\n   * [security guidelines](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image)\n   * when loading the image from a different origin. Failing to do so will result to an empty output frame.\n   */\n  set backgroundImage(image: HTMLImageElement) {\n    if (!image || !image.complete || !image.naturalHeight) {\n      throw new Error('Invalid image. Make sure that the image is an HTMLImageElement and has been successfully loaded');\n    }\n    this._backgroundImage = image;\n    createImageBitmap(this._backgroundImage).then(\n      (imageBitmap) => (this._backgroundProcessorPipeline as VirtualBackgroundProcessorPipeline | VirtualBackgroundProcessorPipelineProxy)\n        .setBackgroundImage(imageBitmap)\n    ).catch(() => {\n      /* noop */\n    });\n  }\n\n  /**\n   * The current [[ImageFit]] for positioning of the background image in the viewport.\n   */\n  get fitType(): ImageFit {\n    return this._fitType;\n  }\n\n  /**\n   * Set a new [[ImageFit]] to be used for positioning the background image in the viewport.\n   */\n  set fitType(fitType: ImageFit) {\n    const validTypes = Object.keys(ImageFit);\n    if (!validTypes.includes(fitType as string)) {\n      console.warn(`Valid fitType not found. Using '${ImageFit.Fill}' as default.`);\n      fitType = ImageFit.Fill;\n    }\n    this._fitType = fitType;\n    (this._backgroundProcessorPipeline as VirtualBackgroundProcessorPipeline | VirtualBackgroundProcessorPipelineProxy)\n      .setFitType(this._fitType)\n      .catch(() => {\n        /* noop */\n      });\n  }\n}\n"]}