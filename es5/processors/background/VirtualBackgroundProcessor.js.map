{"version":3,"file":"VirtualBackgroundProcessor.js","sourceRoot":"","sources":["../../../lib/processors/background/VirtualBackgroundProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import { BackgroundProcessor, BackgroundProcessorOptions } from './BackgroundProcessor';\nimport { ImageFit } from '../../types';\n\n/**\n * Options passed to [[VirtualBackgroundProcessor]] constructor.\n */\nexport interface VirtualBackgroundProcessorOptions extends BackgroundProcessorOptions {\n  /**\n   * The HTMLImageElement to use for background replacement.\n   * An error will be raised if the image hasn't been fully loaded yet. Additionally, the image must follow\n   * [security guidelines](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image)\n   * when loading the image from a different origin. Failing to do so will result to an empty output frame.\n   */\n  backgroundImage: HTMLImageElement;\n\n  /**\n   * The [[ImageFit]] to use for positioning of the background image in the viewport.\n   * @default\n   * ```html\n   * 'Fill'\n   * ```\n   */\n  fitType?: ImageFit;\n}\n\n/**\n * The VirtualBackgroundProcessor, when added to a VideoTrack,\n * replaces the background in each video frame with a given image,\n * and leaves the foreground (person(s)) untouched. Each instance of\n * VirtualBackgroundProcessor should be added to only one VideoTrack\n * at a time to prevent overlapping of image data from multiple VideoTracks.\n *\n * @example\n *\n * ```ts\n * import { createLocalVideoTrack } from 'twilio-video';\n * import { VirtualBackgroundProcessor } from '@twilio/video-processors';\n *\n * let virtualBackground;\n * const img = new Image();\n *\n * img.onload = () => {\n *   virtualBackground = new VirtualBackgroundProcessor({\n *     assetsPath: 'https://my-server-path/assets',\n *     backgroundImage: img,\n *   });\n *\n *   virtualBackground.loadModel().then(() => {\n *     createLocalVideoTrack({\n *       width: 640,\n *       height: 480,\n *       frameRate: 24\n *     }).then(track => {\n *       track.addProcessor(virtualBackground);\n *     });\n *   });\n * };\n * img.src = '/background.jpg';\n * ```\n */\nexport class VirtualBackgroundProcessor extends BackgroundProcessor {\n\n  private _backgroundImage!: HTMLImageElement;\n  private _fitType!: ImageFit;\n  // tslint:disable-next-line no-unused-variable\n  private readonly _name: string = 'VirtualBackgroundProcessor';\n\n  /**\n   * Construct a VirtualBackgroundProcessor. Default values will be used for\n   * any missing optional properties in [[VirtualBackgroundProcessorOptions]],\n   * and invalid properties will be ignored.\n   */\n  constructor(options: VirtualBackgroundProcessorOptions) {\n    super(options);\n    this.backgroundImage = options.backgroundImage;\n    this.fitType = options.fitType!;\n  }\n\n  /**\n   * The HTMLImageElement representing the current background image.\n   */\n  get backgroundImage(): HTMLImageElement {\n    return this._backgroundImage;\n  }\n\n  /**\n   * Set an HTMLImageElement as the new background image.\n   * An error will be raised if the image hasn't been fully loaded yet. Additionally, the image must follow\n   * [security guidelines](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image)\n   * when loading the image from a different origin. Failing to do so will result to an empty output frame.\n   */\n  set backgroundImage(image: HTMLImageElement) {\n    if (!image || !image.complete || !image.naturalHeight) {\n      throw new Error('Invalid image. Make sure that the image is an HTMLImageElement and has been successfully loaded');\n    }\n    this._backgroundImage = image;\n  }\n\n  /**\n   * The current [[ImageFit]] for positioning of the background image in the viewport.\n   */\n  get fitType(): ImageFit {\n    return this._fitType;\n  }\n\n  /**\n   * Set a new [[ImageFit]] to be used for positioning the background image in the viewport.\n   */\n  set fitType(fitType: ImageFit) {\n    const validTypes = Object.keys(ImageFit);\n    if (!validTypes.includes(fitType as any)) {\n      console.warn(`Valid fitType not found. Using '${ImageFit.Fill}' as default.`);\n      fitType = ImageFit.Fill;\n    }\n    this._fitType = fitType;\n  }\n\n  protected _setBackground(): void {\n    const img = this._backgroundImage;\n    const imageWidth = img.naturalWidth;\n    const imageHeight = img.naturalHeight;\n    const canvasWidth = this._outputCanvas.width;\n    const canvasHeight = this._outputCanvas.height;\n\n    if (this._fitType === ImageFit.Fill) {\n      this._outputContext.drawImage(img, 0, 0, imageWidth, imageHeight, 0, 0, canvasWidth, canvasHeight);\n    } else if (this._fitType === ImageFit.None) {\n      this._outputContext.drawImage(img, 0, 0, imageWidth, imageHeight);\n    } else if (this._fitType === ImageFit.Contain) {\n      const { x, y, w, h } = this._getFitPosition(imageWidth, imageHeight, canvasWidth, canvasHeight, ImageFit.Contain);\n      this._outputContext.drawImage(img, 0, 0, imageWidth, imageHeight, x, y, w, h);\n    } else if (this._fitType === ImageFit.Cover) {\n      const { x, y, w, h } = this._getFitPosition(imageWidth, imageHeight, canvasWidth, canvasHeight, ImageFit.Cover);\n      this._outputContext.drawImage(img, 0, 0, imageWidth, imageHeight, x, y, w, h);\n    }\n  }\n\n  private _getFitPosition(contentWidth: number, contentHeight: number,\n    viewportWidth: number, viewportHeight: number, type: ImageFit)\n      : { h: number, w: number, x: number, y: number } {\n\n    // Calculate new content width to fit viewport width\n    let factor = viewportWidth / contentWidth;\n    let newContentWidth = viewportWidth;\n    let newContentHeight = factor * contentHeight;\n\n    // Scale down the resulting height and width more\n    // to fit viewport height if the content still exceeds it\n    if ((type === ImageFit.Contain && newContentHeight > viewportHeight)\n      || (type === ImageFit.Cover && viewportHeight > newContentHeight)) {\n      factor = viewportHeight / newContentHeight;\n      newContentWidth = factor * newContentWidth;\n      newContentHeight = viewportHeight;\n    }\n\n    // Calculate the destination top left corner to center the content\n    const x = (viewportWidth - newContentWidth) / 2;\n    const y = (viewportHeight - newContentHeight) / 2;\n\n    return {\n      x, y,\n      w: newContentWidth,\n      h: newContentHeight,\n    };\n  }\n}\n"]}