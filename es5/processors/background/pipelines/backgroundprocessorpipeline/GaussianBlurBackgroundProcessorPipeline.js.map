{"version":3,"file":"GaussianBlurBackgroundProcessorPipeline.js","sourceRoot":"","sources":["../../../../../lib/processors/background/pipelines/backgroundprocessorpipeline/GaussianBlurBackgroundProcessorPipeline.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,qDAAkE;AAClE,4EAA2E;AAC3E,6EAAgH;AAShH;;GAEG;AACH;IAA6D,2DAA2B;IAItF,iDAAY,OAAuD;QAAnE,YACE,kBACE,OAAO,EACP,cAAM,OAAA,KAAI,CAAC,gCAAgC,EAAE,EAAvC,CAAuC,CAC9C,SAOF;QAbO,iCAA2B,GAAsC,IAAI,CAAC;QAS1E,IAAA,gBAAgB,GACd,OAAO,iBADO,CACN;QAEZ,KAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;;IAC5C,CAAC;IAEK,qEAAmB,GAAzB,UAA0B,MAAc;;;;gBACtC,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC;gBAChC,sBAAO,MAAA,IAAI,CAAC,2BAA2B,0CAAE,YAAY,CACnD,IAAI,CAAC,iBAAiB,CACvB,EAAC;;;KACH;IAES,gEAAc,GAAxB,UAAyB,UAAsB;QACvC,IAAA,KAIF,IAAI,EAHN,iBAAiB,uBAAA,EACjB,aAAa,mBAAA,EACb,aAAa,mBACP,CAAC;QAET,IAAM,GAAG,GAAG,aAAa,CAAC,UAAU,CAAC,IAAI,CAAE,CAAC;QAC5C,IAAI,+BAAqB,EAAE;YACzB,GAAG,CAAC,MAAM,GAAG,eAAQ,iBAAiB,QAAK,CAAC;YAC5C,GAAG,CAAC,SAAS,CACX,UAAU,EACV,CAAC,EACD,CAAC,CACF,CAAC;YACF,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;YACpB,OAAO;SACR;QACD,IAAI,CAAC,IAAI,CAAC,2BAA2B,EAAE;YACrC,IAAI,CAAC,gCAAgC,EAAE,CAAC;SACzC;QACD,IAAI,CAAC,2BAA4B,CAAC,MAAM,EAAE,CAAC;QAC3C,GAAG,CAAC,SAAS,CACX,aAAa,EACb,CAAC,EACD,CAAC,CACF,CAAC;IACJ,CAAC;IAEO,kFAAgC,GAAxC;;QACQ,IAAA,KAGF,IAAI,EAFN,iBAAiB,uBAAA,EACjB,aAAa,mBACP,CAAC;QACT,MAAA,IAAI,CAAC,2BAA2B,0CAAE,OAAO,EAAE,CAAC;QAC5C,IAAI,CAAC,2BAA2B,GAAG,IAAI,uDAA0B,CAC/D,aAAa,CACd,CAAC;QACF,IAAI,CAAC,2BAA4B,CAAC,YAAY,CAC5C,iBAAiB,CAClB,CAAC;IACJ,CAAC;IACH,8CAAC;AAAD,CAAC,AAlED,CAA6D,yDAA2B,GAkEvF;AAlEY,0FAAuC","sourcesContent":["import { InputFrame } from '../../../../types';\nimport { isCanvasBlurSupported } from '../../../../utils/support';\nimport { GaussianBlurFilterPipeline } from '../gaussianblurfilterpipeline';\nimport { BackgroundProcessorPipeline, BackgroundProcessorPipelineOptions } from './BackgroundProcessorPipeline';\n\n/**\n * @private\n */\nexport interface GaussianBlurBackgroundProcessorPipelineOptions extends BackgroundProcessorPipelineOptions {\n  blurFilterRadius: number;\n}\n\n/**\n * @private\n */\nexport class GaussianBlurBackgroundProcessorPipeline extends BackgroundProcessorPipeline {\n  private _blurFilterRadius: number;\n  private _gaussianBlurFilterPipeline: GaussianBlurFilterPipeline | null = null;\n\n  constructor(options: GaussianBlurBackgroundProcessorPipelineOptions) {\n    super(\n      options,\n      () => this._resetGaussianBlurFilterPipeline()\n    );\n\n    const {\n      blurFilterRadius\n    } = options;\n\n    this._blurFilterRadius = blurFilterRadius;\n  }\n\n  async setBlurFilterRadius(radius: number): Promise<void> {\n    this._blurFilterRadius = radius;\n    return this._gaussianBlurFilterPipeline?.updateRadius(\n      this._blurFilterRadius\n    );\n  }\n\n  protected _setBackground(inputFrame: InputFrame): void {\n    const {\n      _blurFilterRadius,\n      _outputCanvas,\n      _webgl2Canvas\n    } = this;\n\n    const ctx = _outputCanvas.getContext('2d')!;\n    if (isCanvasBlurSupported) {\n      ctx.filter = `blur(${_blurFilterRadius}px)`;\n      ctx.drawImage(\n        inputFrame,\n        0,\n        0\n      );\n      ctx.filter = 'none';\n      return;\n    }\n    if (!this._gaussianBlurFilterPipeline) {\n      this._resetGaussianBlurFilterPipeline();\n    }\n    this._gaussianBlurFilterPipeline!.render();\n    ctx.drawImage(\n      _webgl2Canvas,\n      0,\n      0\n    );\n  }\n\n  private _resetGaussianBlurFilterPipeline(): void {\n    const {\n      _blurFilterRadius,\n      _webgl2Canvas\n    } = this;\n    this._gaussianBlurFilterPipeline?.cleanUp();\n    this._gaussianBlurFilterPipeline = new GaussianBlurFilterPipeline(\n      _webgl2Canvas\n    );\n    this._gaussianBlurFilterPipeline!.updateRadius(\n      _blurFilterRadius\n    );\n  }\n}\n"]}