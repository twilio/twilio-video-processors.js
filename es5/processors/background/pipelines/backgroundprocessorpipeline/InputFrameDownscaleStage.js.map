{"version":3,"file":"InputFrameDownscaleStage.js","sourceRoot":"","sources":["../../../../../lib/processors/background/pipelines/backgroundprocessorpipeline/InputFrameDownscaleStage.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;GAEG;AACH;IAIE,iCACE,YAA6B,EAC7B,uBAAkD;QAGlD,IAAI,CAAC,wBAAwB,GAAG,uBAAuB,CAAC;QACxD,IAAI,CAAC,cAAc,GAAG,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAE,CAAC;IACrF,CAAC;IAEK,wCAAM,GAAZ,UAAa,UAAsB;;;;;;wBAC3B,KAGF,IAAI,EAFN,cAAc,oBAAA,EACd,wBAAwB,8BAAA,CACjB;wBAGP,KAIE,cAAc,OADf,EAFS,YAAY,YAAA,EACb,WAAW,WAAA,CAEH;6BAEf,CAAA,wBAAwB,KAAK,cAAc,CAAA,EAA3C,wBAA2C;wBACpB,qBAAM,iBAAiB,CAC9C,UAAU,EACV;gCACE,WAAW,aAAA;gCACX,YAAY,cAAA;gCACZ,aAAa,EAAE,WAAW;6BAC3B,CACF,EAAA;;wBAPK,gBAAgB,GAAG,SAOxB;wBACD,cAAc,CAAC,SAAS,CACtB,gBAAgB,EAChB,CAAC,EACD,CAAC,CACF,CAAC;wBACF,gBAAgB,CAAC,KAAK,EAAE,CAAC;;;wBAEzB,cAAc,CAAC,SAAS,CACtB,UAAU,EACV,CAAC,EACD,CAAC,EACD,WAAW,EACX,YAAY,CACb,CAAC;;;wBAGI,IAAI,GAAK,cAAc,CAAC,YAAY,CAC1C,CAAC,EACD,CAAC,EACD,WAAW,EACX,YAAY,CACb,KALW,CAKV;wBAEF,sBAAO,IAAI,EAAC;;;;KACb;IACH,8BAAC;AAAD,CAAC,AA5DD,IA4DC;AA5DY,0DAAuB","sourcesContent":["import { InputFrame } from '../../../../types';\nimport { Pipeline } from '../../../pipelines';\n\n/**\n * @private\n */\nexport class InputFrameDowscaleStage implements Pipeline.Stage {\n  private readonly _inputFrameDownscaleMode: 'canvas' | 'image-bitmap';\n  private readonly _outputContext: OffscreenCanvasRenderingContext2D;\n\n  constructor(\n    outputCanvas: OffscreenCanvas,\n    inputFrameDownscaleMode: 'canvas' | 'image-bitmap'\n\n) {\n    this._inputFrameDownscaleMode = inputFrameDownscaleMode;\n    this._outputContext = outputCanvas.getContext('2d', { willReadFrequently: true })!;\n  }\n\n  async render(inputFrame: InputFrame): Promise<Uint8ClampedArray> {\n    const {\n      _outputContext,\n      _inputFrameDownscaleMode,\n    } = this;\n\n    const {\n      canvas: {\n        height: resizeHeight,\n        width: resizeWidth\n      }\n    } = _outputContext;\n\n    if (_inputFrameDownscaleMode === 'image-bitmap') {\n      const downscaledBitmap = await createImageBitmap(\n        inputFrame,\n        {\n          resizeWidth,\n          resizeHeight,\n          resizeQuality: 'pixelated'\n        }\n      );\n      _outputContext.drawImage(\n        downscaledBitmap,\n        0,\n        0\n      );\n      downscaledBitmap.close();\n    } else {\n      _outputContext.drawImage(\n        inputFrame,\n        0,\n        0,\n        resizeWidth,\n        resizeHeight\n      );\n    }\n\n    const { data } = _outputContext.getImageData(\n      0,\n      0,\n      resizeWidth,\n      resizeHeight\n    );\n\n    return data;\n  }\n}\n"]}