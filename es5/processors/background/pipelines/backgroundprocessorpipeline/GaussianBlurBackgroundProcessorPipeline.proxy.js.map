{"version":3,"file":"GaussianBlurBackgroundProcessorPipeline.proxy.js","sourceRoot":"","sources":["../../../../../lib/processors/background/pipelines/backgroundprocessorpipeline/GaussianBlurBackgroundProcessorPipeline.proxy.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAuC;AACvC,mDAAkG;AAClG,yFAAuF;AAGvF,IAAI,6CAAqG,CAAC;AAE1G;;GAEG;AACH;IAAkE,gEAAgC;IAGhG,sDACE,OAAuD;QADzD,iBASC;QANC,6CAA6C,KAA7C,6CAA6C,GAAK,IAAA,cAAI,EACpD,IAAI,MAAM,CAAC,UAAG,OAAO,CAAC,UAAU,SAAG,qEAAyD,CAAE,CAAC,CAChG,EAAC;QACF,IAAM,qBAAqB,GAAG,IAAI,6CAA6C,CAAC,OAAO,CAAC,CAAC;gBACzF,kBAAM,qBAAqB,CAAC;QAC5B,KAAI,CAAC,sBAAsB,GAAG,qBAAqB,CAAC;;IACtD,CAAC;IAEK,0EAAmB,GAAzB,UAA0B,MAAc;;;;;4BACf,qBAAM,IAAI,CAAC,sBAAsB,EAAA;;wBAAlD,cAAc,GAAG,SAAiC;wBACxD,sBAAO,cAAc,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAC;;;;KACnD;IACH,mDAAC;AAAD,CAAC,AAlBD,CAAkE,oEAAgC,GAkBjG;AAlBY,oGAA4C","sourcesContent":["import { Remote, wrap } from 'comlink';\nimport { TWILIO_GAUSSIAN_BLUR_BACKGROUND_PROCESSOR_PIPELINE_WORKER } from '../../../../constants';\nimport { BackgroundProcessorPipelineProxy } from './BackgroundProcessorPipeline.proxy';\nimport { GaussianBlurBackgroundProcessorPipeline, GaussianBlurBackgroundProcessorPipelineOptions } from './GaussianBlurBackgroundProcessorPipeline';\n\nlet GaussianBlurBackgroundProcessorPipelineWorker: Remote<typeof GaussianBlurBackgroundProcessorPipeline>;\n\n/**\n * @private\n */\nexport class GaussianBlurBackgroundProcessorPipelineProxy extends BackgroundProcessorPipelineProxy {\n  protected readonly _pipelineWorkerPromise: Promise<Remote<GaussianBlurBackgroundProcessorPipeline>>;\n\n  constructor(\n    options: GaussianBlurBackgroundProcessorPipelineOptions\n  ) {\n    GaussianBlurBackgroundProcessorPipelineWorker ||= wrap<typeof GaussianBlurBackgroundProcessorPipeline>(\n      new Worker(`${options.assetsPath}${TWILIO_GAUSSIAN_BLUR_BACKGROUND_PROCESSOR_PIPELINE_WORKER}`)\n    );\n    const pipelineWorkerPromise = new GaussianBlurBackgroundProcessorPipelineWorker(options);\n    super(pipelineWorkerPromise);\n    this._pipelineWorkerPromise = pipelineWorkerPromise;\n  }\n\n  async setBlurFilterRadius(radius: number): Promise<void> {\n    const pipelineWorker = await this._pipelineWorkerPromise;\n    return pipelineWorker.setBlurFilterRadius(radius);\n  }\n}\n"]}