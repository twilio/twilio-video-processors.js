{"version":3,"file":"BackgroundProcessorPipeline.js","sourceRoot":"","sources":["../../../../../lib/processors/background/pipelines/backgroundprocessorpipeline/BackgroundProcessorPipeline.ts"],"names":[],"mappings":"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","sourcesContent":["import { MODEL_NAME, TFLITE_LOADER_NAME, TFLITE_SIMD_LOADER_NAME, WASM_INFERENCE_DIMENSIONS } from '../../../../constants';\nimport { Benchmark } from '../../../../utils/Benchmark';\nimport { isChromiumImageBitmap } from '../../../../utils/support';\nimport { TwilioTFLite } from '../../../../utils/TwilioTFLite';\nimport { InputFrame } from '../../../../types';\nimport { Pipeline } from '../../../pipelines';\nimport { InputFrameDowscaleStage } from './InputFrameDownscaleStage';\nimport { PostProcessingStage } from './PostProcessingStage';\n\n/**\n * @private\n */\nexport interface BackgroundProcessorPipelineOptions {\n  assetsPath: string;\n  deferInputFrameDownscale: boolean;\n  maskBlurRadius: number;\n}\n\n/**\n * @private\n */\nexport abstract class BackgroundProcessorPipeline extends Pipeline {\n  private static _twilioTFLite: TwilioTFLite | null = null;\n\n  protected readonly _outputCanvas = new OffscreenCanvas(1, 1);\n  protected readonly _webgl2Canvas = new OffscreenCanvas(1, 1);\n  private readonly _assetsPath: string;\n  private readonly _benchmark = new Benchmark();\n  private _deferInputFrameDownscale: boolean;\n  private readonly _inferenceInputCanvas = new OffscreenCanvas(WASM_INFERENCE_DIMENSIONS.width, WASM_INFERENCE_DIMENSIONS.height);\n  private readonly _inputFrameDownscaleMode = isChromiumImageBitmap() ? 'image-bitmap' : 'canvas';\n  private readonly _onResizeWebGL2Canvas: () => void;\n\n  protected constructor(\n    options: BackgroundProcessorPipelineOptions,\n    onResizeWebGL2Canvas = () => {}\n  ) {\n    super();\n\n    const {\n      assetsPath,\n      deferInputFrameDownscale,\n      maskBlurRadius\n    } = options;\n\n    this._assetsPath = assetsPath;\n    this._deferInputFrameDownscale = deferInputFrameDownscale;\n    this._onResizeWebGL2Canvas = onResizeWebGL2Canvas;\n\n    this.addStage(new InputFrameDowscaleStage(\n      this._inferenceInputCanvas,\n      this._inputFrameDownscaleMode\n    ));\n\n    this.addStage(new PostProcessingStage(\n      WASM_INFERENCE_DIMENSIONS,\n      this._webgl2Canvas,\n      this._outputCanvas,\n      maskBlurRadius,\n      (inputFrame?: InputFrame): void => this._setBackground(inputFrame)\n    ));\n  }\n\n  async loadTwilioTFLite(): Promise<boolean> {\n    let { _twilioTFLite } = BackgroundProcessorPipeline;\n    if (!_twilioTFLite) {\n      _twilioTFLite = new TwilioTFLite();\n      await _twilioTFLite.initialize(\n        this._assetsPath,\n        MODEL_NAME,\n        TFLITE_LOADER_NAME,\n        TFLITE_SIMD_LOADER_NAME\n      );\n      BackgroundProcessorPipeline._twilioTFLite = _twilioTFLite;\n    }\n    return _twilioTFLite.isSimdEnabled!;\n  }\n\n  async render(inputFrame: InputFrame): Promise<OffscreenCanvas | ImageBitmap | null> {\n    if (!BackgroundProcessorPipeline._twilioTFLite) {\n      return null;\n    }\n\n    const [\n      inputFrameDownscaleStage,\n      postProcessingStage\n    ] = this._stages as [\n      InputFrameDowscaleStage,\n      PostProcessingStage\n    ];\n\n    const {\n      _benchmark,\n      _deferInputFrameDownscale,\n      _inferenceInputCanvas: {\n        height: inferenceInputHeight,\n        width: inferenceInputWidth\n      },\n      _outputCanvas,\n      _webgl2Canvas\n    } = this;\n\n    const {\n      _twilioTFLite\n    } = BackgroundProcessorPipeline;\n\n    const isInputVideoFrame = typeof VideoFrame === 'function'\n      && inputFrame instanceof VideoFrame;\n\n    const { height, width } = isInputVideoFrame\n      ? { height: inputFrame.displayHeight, width: inputFrame.displayWidth }\n      : inputFrame as (OffscreenCanvas | HTMLCanvasElement | ImageBitmap);\n\n    let didResizeWebGL2Canvas = false;\n    if (_outputCanvas.width !== width) {\n      _outputCanvas.width = width;\n      _webgl2Canvas.width = width;\n      didResizeWebGL2Canvas = true;\n    }\n    if (_outputCanvas.height !== height) {\n      _outputCanvas.height = height;\n      _webgl2Canvas.height = height;\n      didResizeWebGL2Canvas = true;\n    }\n    if (didResizeWebGL2Canvas) {\n      postProcessingStage.resetPersonMaskUpscalePipeline();\n      this._onResizeWebGL2Canvas();\n    }\n\n    _benchmark.start('inputImageResizeDelay');\n    const downscalePromise = inputFrameDownscaleStage.render(inputFrame)\n      .then((downscaledFrameData) => {\n        _twilioTFLite!.loadInputBuffer(downscaledFrameData);\n      });\n\n    if (!_deferInputFrameDownscale) {\n      await downscalePromise;\n    }\n    _benchmark.end('inputImageResizeDelay');\n\n    _benchmark.start('segmentationDelay');\n    const personMask = new ImageData(\n      _twilioTFLite!.runInference(),\n      inferenceInputWidth,\n      inferenceInputHeight\n    );\n    _benchmark.end('segmentationDelay');\n\n    _benchmark.start('imageCompositionDelay');\n    postProcessingStage.render(\n      inputFrame,\n      personMask\n    );\n    _benchmark.end('imageCompositionDelay');\n\n    if ((typeof VideoFrame === 'function' && inputFrame instanceof VideoFrame)\n      || (typeof ImageBitmap === 'function' && inputFrame instanceof ImageBitmap)) {\n      inputFrame.close();\n    }\n\n    return this._outputCanvas;\n  }\n\n  async setDeferInputFrameDownscale(defer: boolean): Promise<void> {\n    this._deferInputFrameDownscale = defer;\n  }\n\n  async setMaskBlurRadius(radius: number): Promise<void> {\n    (this._stages[1] as PostProcessingStage)\n      .updateMaskBlurRadius(radius);\n  }\n\n  protected abstract _setBackground(inputFrame?: InputFrame): void;\n}\n"]}