{"version":3,"file":"BackgroundProcessorPipeline.proxy.js","sourceRoot":"","sources":["../../../../../lib/processors/background/pipelines/backgroundprocessorpipeline/BackgroundProcessorPipeline.proxy.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAA2C;AAC3C,yDAAwD;AAGxD;;GAEG;AACH;IAIE,0CACE,qBAAmE;QAHpD,eAAU,GAAc,IAAI,qBAAS,EAAE,CAAC;QAKvD,IAAI,CAAC,sBAAsB,GAAG,qBAAqB,CAAC;IACtD,CAAC;IAEK,2DAAgB,GAAtB;;;;;4BACyB,qBAAM,IAAI,CAAC,sBAAsB,EAAA;;wBAAlD,cAAc,GAAG,SAAiC;wBACxD,sBAAO,cAAc,CAAC,gBAAgB,EAAE,EAAC;;;;KAC1C;IAEK,iDAAM,GAAZ,UAAa,UAAoC;;;;;4BACxB,qBAAM,IAAI,CAAC,sBAAsB,EAAA;;wBAAlD,cAAc,GAAG,SAAiC;wBACpC,qBAAM,cAAc,CAAC,MAAM,CAC7C,IAAA,kBAAQ,EAAC,UAAU,EAAE,CAAC,UAAU,CAAC,CAAC,CACnC,EAAA;;wBAFK,WAAW,GAAG,SAEnB;wBACD,aAAa;wBACb,KAAA,CAAA,KAAA,IAAI,CAAC,UAAU,CAAA,CAAC,KAAK,CAAA;wBAAC,qBAAM,cAAc,CAAC,UAAU,EAAA;;wBADrD,aAAa;wBACb,cAAsB,SAA+B,EAAC,CAAC;wBACvD,sBAAO,WAAiC,EAAC;;;;KAC1C;IAEK,sEAA2B,GAAjC,UAAkC,KAAc;;;;;4BACvB,qBAAM,IAAI,CAAC,sBAAsB,EAAA;;wBAAlD,cAAc,GAAG,SAAiC;wBACxD,sBAAO,cAAc,CAAC,2BAA2B,CAAC,KAAK,CAAC,EAAC;;;;KAC1D;IAEK,4DAAiB,GAAvB,UAAwB,MAAc;;;;;4BACb,qBAAM,IAAI,CAAC,sBAAsB,EAAA;;wBAAlD,cAAc,GAAG,SAAiC;wBACxD,sBAAO,cAAc,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAC;;;;KACjD;IACH,uCAAC;AAAD,CAAC,AAlCD,IAkCC;AAlCY,4EAAgC","sourcesContent":["import { Remote, transfer } from 'comlink';\nimport { Benchmark } from '../../../../utils/Benchmark';\nimport { BackgroundProcessorPipeline } from './BackgroundProcessorPipeline';\n\n/**\n * @private\n */\nexport class BackgroundProcessorPipelineProxy {\n  protected readonly _pipelineWorkerPromise: Promise<Remote<BackgroundProcessorPipeline>>;\n  private readonly _benchmark: Benchmark = new Benchmark();\n\n  protected constructor(\n    pipelineWorkerPromise: Promise<Remote<BackgroundProcessorPipeline>>\n  ) {\n    this._pipelineWorkerPromise = pipelineWorkerPromise;\n  }\n\n  async loadTwilioTFLite(): Promise<boolean> {\n    const pipelineWorker = await this._pipelineWorkerPromise;\n    return pipelineWorker.loadTwilioTFLite();\n  }\n\n  async render(inputFrame: VideoFrame | ImageBitmap): Promise<ImageBitmap | null> {\n    const pipelineWorker = await this._pipelineWorkerPromise;\n    const outputFrame = await pipelineWorker.render(\n      transfer(inputFrame, [inputFrame])\n    );\n    // @ts-ignore\n    this._benchmark.merge(await pipelineWorker._benchmark);\n    return outputFrame as ImageBitmap | null;\n  }\n\n  async setDeferInputFrameDownscale(defer: boolean): Promise<void> {\n    const pipelineWorker = await this._pipelineWorkerPromise;\n    return pipelineWorker.setDeferInputFrameDownscale(defer);\n  }\n\n  async setMaskBlurRadius(radius: number): Promise<void> {\n    const pipelineWorker = await this._pipelineWorkerPromise;\n    return pipelineWorker.setMaskBlurRadius(radius);\n  }\n}\n"]}