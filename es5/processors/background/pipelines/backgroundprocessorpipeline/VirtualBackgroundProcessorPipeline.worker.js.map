{"version":3,"file":"VirtualBackgroundProcessorPipeline.worker.js","sourceRoot":"","sources":["../../../../../lib/processors/background/pipelines/backgroundprocessorpipeline/VirtualBackgroundProcessorPipeline.worker.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAA2C;AAC3C,2FAA0F;AAE1F;;GAEG;AACH;IAA8D,4DAAkC;IAAhG;;IAaA,CAAC;IAZO,yDAAM,GAAZ,UAAa,UAAoC;;;;;4BAC3B,qBAAM,iBAAM,MAAM,YAAC,UAAU,CAAC,EAAA;;wBAA5C,WAAW,GAAG,SAA8B;wBAE5C,YAAY,GAAG,WAAW,YAAY,eAAe;4BACzD,CAAC,CAAC,WAAW,CAAC,qBAAqB,EAAE;4BACrC,CAAC,CAAC,WAAW,CAAC;wBAEhB,sBAAO,YAAY,IAAI,IAAA,kBAAQ,EAC7B,YAAY,EACZ,CAAC,YAAY,CAAC,CACf,EAAC;;;;KACH;IACH,+CAAC;AAAD,CAAC,AAbD,CAA8D,uEAAkC,GAa/F;AAbY,4FAAwC;AAerD,IAAA,gBAAM,EAAC,wCAAwC,CAAC,CAAC","sourcesContent":["import { expose, transfer } from 'comlink';\nimport { VirtualBackgroundProcessorPipeline } from './VirtualBackgroundProcessorPipeline';\n\n/**\n * @private\n */\nexport class VirtualBackgroundProcessorPipelineWorker extends VirtualBackgroundProcessorPipeline {\n  async render(inputFrame: VideoFrame | ImageBitmap): Promise<ImageBitmap | null> {\n    const outputFrame = await super.render(inputFrame);\n\n    const outputBitmap = outputFrame instanceof OffscreenCanvas\n      ? outputFrame.transferToImageBitmap()\n      : outputFrame;\n\n    return outputBitmap && transfer(\n      outputBitmap,\n      [outputBitmap]\n    );\n  }\n}\n\nexpose(VirtualBackgroundProcessorPipelineWorker);\n"]}