{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/processors/background/pipelines/personmaskupscalepipeline/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AACA,gDAAoD;AACpD,mFAAkF;AAElF;;GAEG;AACH;IAA+C,6CAAc;IAC3D,mCACE,eAA2B,EAC3B,YAAiD;QAFnD,YAIE,iBAAO,SA4BR;QA3BC,IAAM,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,QAAQ,CAA4B,CAAC;QAE3E,IAAM,gBAAgB,GAAG;YACvB,MAAM,EAAE,YAAY,CAAC,MAAM;YAC3B,KAAK,EAAE,YAAY,CAAC,KAAK;SAC1B,CAAC;QAEF,KAAI,CAAC,QAAQ,CAAC,IAAI,0BAAc,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QAEpD,KAAI,CAAC,QAAQ,CAAC,IAAI,+DAA8B,CAC9C,KAAK,EACL,YAAY,EACZ,SAAS,EACT,eAAe,EACf,gBAAgB,EAChB,CAAC,EACD,CAAC,CACF,CAAC,CAAC;QAEH,KAAI,CAAC,QAAQ,CAAC,IAAI,+DAA8B,CAC9C,KAAK,EACL,UAAU,EACV,QAAQ,EACR,eAAe,EACf,gBAAgB,EAChB,CAAC,CACF,CAAC,CAAC;;IACL,CAAC;IAED,+DAA2B,GAA3B,UAA4B,MAA6B;QACjD,IAAA,KAGF,IAAI,CAAC,OAAO,EADX,qBAAqB,cACV,CAAC;QACT,IAAA,UAAU,GAAK,MAAM,WAAX,CAAY;QAE9B,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;YACjC,qBAA0D,CAAC,OAAO,CACjE,UAAC,KAAK;gBACJ,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC5B,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YACrC,CAAC,CACF,CAAC;SACH;IACH,CAAC;IACH,gCAAC;AAAD,CAAC,AAnDD,CAA+C,0BAAc,GAmD5D;AAnDY,8DAAyB","sourcesContent":["import { BilateralFilterConfig, Dimensions } from '../../../../types';\nimport { WebGL2Pipeline } from '../../../pipelines';\nimport { SinglePassBilateralFilterStage } from './SinglePassBilateralFilterStage';\n\n/**\n * @private\n */\nexport class PersonMaskUpscalePipeline extends WebGL2Pipeline {\n  constructor(\n    inputDimensions: Dimensions,\n    outputCanvas: OffscreenCanvas | HTMLCanvasElement\n  ) {\n    super();\n    const glOut = outputCanvas.getContext('webgl2')! as WebGL2RenderingContext;\n\n    const outputDimensions = {\n      height: outputCanvas.height,\n      width: outputCanvas.width\n    };\n\n    this.addStage(new WebGL2Pipeline.InputStage(glOut));\n\n    this.addStage(new SinglePassBilateralFilterStage(\n      glOut,\n      'horizontal',\n      'texture',\n      inputDimensions,\n      outputDimensions,\n      1,\n      2\n    ));\n\n    this.addStage(new SinglePassBilateralFilterStage(\n      glOut,\n      'vertical',\n      'canvas',\n      inputDimensions,\n      outputDimensions,\n      2\n    ));\n  }\n\n  updateBilateralFilterConfig(config: BilateralFilterConfig) {\n    const [\n      /* inputStage */,\n      ...bilateralFilterStages\n    ] = this._stages;\n    const { sigmaSpace } = config;\n\n    if (typeof sigmaSpace === 'number') {\n      (bilateralFilterStages as SinglePassBilateralFilterStage[]).forEach(\n        (stage) => {\n          stage.updateSigmaColor(0.1);\n          stage.updateSigmaSpace(sigmaSpace);\n        }\n      );\n    }\n  }\n}\n"]}