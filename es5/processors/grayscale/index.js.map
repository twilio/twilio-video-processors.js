{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/processors/grayscale/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,0CAAyC;AAEzC;;;;GAIG;AACH;IAAwC,sCAAS;IAAjD;;IAcA,CAAC;IAZC;;;;OAIG;IACH,yCAAY,GAAZ,UAAa,gBAAiC,EAAE,iBAAoC;QAClF,IAAM,OAAO,GAAG,iBAAiB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,OAAO,EAAE;YACX,OAAO,CAAC,MAAM,GAAG,iBAAiB,CAAC;YACnC,OAAO,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAC,EAAE,gBAAgB,CAAC,KAAK,EAAE,gBAAgB,CAAC,MAAM,CAAC,CAAC;SAC5F;IACH,CAAC;IACH,yBAAC;AAAD,CAAC,AAdD,CAAwC,qBAAS,GAchD;AAdY,gDAAkB","sourcesContent":["import { Processor } from '../Processor';\n\n/**\n * @private\n * The [[GrayscaleProcessor]] is a [[Processor]] which applies\n * a grayscale transform to a frame.\n */\nexport class GrayscaleProcessor extends Processor {\n\n  /**\n   * Applies a grayscale transform to the input frame and draw the results to an output frame.\n   * @param inputFrameBuffer - The source of the input frame to process.\n   * @param outputFrameBuffer - The output frame buffer to use to draw the processed frame.\n   */\n  processFrame(inputFrameBuffer: OffscreenCanvas, outputFrameBuffer: HTMLCanvasElement): void {\n    const context = outputFrameBuffer.getContext('2d');\n    if (context) {\n      context.filter = 'grayscale(100%)';\n      context.drawImage(inputFrameBuffer, 0, 0, inputFrameBuffer.width, inputFrameBuffer.height);\n    }\n  }\n}\n"]}